}
ebs_mean
ibs_mean
solve(sigm)
solve(ebs_mean)
solve(ibs_mean)
sigm
cover_ebs
cover_ibs
cover_orc
asg
rm(list=ls())
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 1
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 5e5+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .505
nparm <- 5
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm1 <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm1)
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
#critical value calculation
crt_val <- qchisq(qlev,df=nparm)
#Sigma matrix estimate
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
#1000  Replications to obtain stable mses
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 80 * eta[i] * gradnt_log(y[i],x[i,],sg[i-1,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%(sigm)%*%(asg-parm)<=crt_val)
}
asg
plot.ts(sg_ct)
rm(list=ls())
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 1
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 5e5+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .505
nparm <- 5
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm1 <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm1)
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
#critical value calculation
crt_val <- qchisq(qlev,df=nparm)
#Sigma matrix estimate
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
#1000  Replications to obtain stable mses
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 8 * eta[i] * gradnt_log(y[i],x[i,],sg[i-1,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%(sigm)%*%(asg-parm)<=crt_val)
}
cover_ebs
cover_ibs
cover_orc
n*t(asg-parm)%*%(sigm)%*%(asg-parm)
n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)
n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)
volm_ebs
volm_ibs
forb_ebs
forb_ibs
rm(list=ls())
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 1
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 5e5+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .505
nparm <- 5
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm1 <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm1)
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
#critical value calculation
crt_val <- qchisq(qlev,df=nparm)
#Sigma matrix estimate
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
#1000  Replications to obtain stable mses
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 8 * eta[i] * gradnt_log(y[i],x[i,],sg[i-1,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-solve(sigm))^2))/sqrt(sum(sigm^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-solve(sigm))^2))/sqrt(sum(sigm^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%(sigm)%*%(asg-parm)<=crt_val)
}
forb_ebs
forb_ibs
rm(list=ls())
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 1
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 5e5+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .505
nparm <- 5
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm1 <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm1)
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
#critical value calculation
crt_val <- qchisq(qlev,df=nparm)
#Sigma matrix estimate
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
#1000  Replications to obtain stable mses
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 8 * eta[i] * gradnt_log(y[i],x[i,],sg[i-1,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-solve(sigm))^2))/sqrt(sum((solve(sigm))^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-solve(sigm))^2))/sqrt(sum((solve(sigm))^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%(sigm)%*%(asg-parm)<=crt_val)
}
forb_ebs
forb_ibs
rm(list=ls())
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 1
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 5e5+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .505
nparm <- 5
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm1 <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm1)
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
#critical value calculation
crt_val <- qchisq(qlev,df=nparm)
#Sigma matrix estimate
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
#1000  Replications to obtain stable mses
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 8 * eta[i] * gradnt_log(y[i],x[i,],sg[i-1,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-solve(sigm))^2))/sqrt(sum((solve(sigm))^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-solve(sigm))^2))/sqrt(sum((solve(sigm))^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%(sigm)%*%(asg-parm)<=crt_val)
}
forb_ebs
forb_ibs
cover_ebs
source("~/GitHub/Batch_Means_Online/logistic/sgd_logistic_regr.R", echo=TRUE)
cover_ibs
cover_orc
ebs_mean
ebs_mean
ebs_batch_mean(sg_ct,alp)
sg_ct
asg
rm(list=ls())
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 1
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 5e5+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .505
nparm <- 5
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm1 <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm1)
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
#critical value calculation
crt_val <- qchisq(qlev,df=nparm)
#Sigma matrix estimate
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
#1000  Replications to obtain stable mses
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 8 * eta[i] * gradnt_log(y[i],x[i,],sg[i-1,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-solve(sigm))^2))/sqrt(sum((solve(sigm))^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-solve(sigm))^2))/sqrt(sum((solve(sigm))^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%(sigm)%*%(asg-parm)<=crt_val)
}
asg
ebs_mean
ibs_mean
solve(sigm)
gc()
gc()
gc()
gc()
gc()
gc()
sqrt_sig
rm(list=ls())
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 1
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 5e5+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .505
nparm <- 5
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sqrt_sig <- sqrt_mat(1*diag(nparm))
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
#critical value calculation
crt_val <- qchisq(qlev,df=nparm)
#Sigma matrix estimate
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
sqrt_sig
plot.ts(sg_ct)
asg
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 8 * eta[i] * gradnt_log(y[i],x[i,],sg[i-1,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
asg
plot.ts(sg_ct)
cover_orc
