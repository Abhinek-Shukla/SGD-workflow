n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
#critical value calculation
ons <- rep(1,nparm)
low_ebs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
up_ebs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
cover_ebs[cn] <- as.numeric (t(ons)%*%parm<=up_ebs&t(ons)%*%parm>=low_ebs)
low_ibs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
up_ibs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
cover_ibs[cn] <- as.numeric (t(ons)%*%parm<=up_ibs&t(ons)%*%parm>=low_ibs)
low_orc <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
up_orc <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
cover_orc[cn] <- as.numeric (t(ons)%*%parm<=up_orc&t(ons)%*%parm>=low_orc)
#cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
#cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
#cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
}
sg_ct
gradnt_log(sg[i-1,],y[i],x[i,])
rm(list=ls())
setwd("C:/Users/Hp/Documents/GitHub/Batch_Means_Online/logistic")
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 10
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e4+cutf;
#Significance level
qlev <- 0.05
crt_val <- qnorm(1-qlev/2)
#Iterations
alp <- .501
nparm <- 2
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
#1000  Replications to obtain stable mses
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 5 * eta[i] * gradnt_log(sg[i-1,],y[i],x[i,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
#critical value calculation
ons <- rep(1,nparm)
low_ebs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
up_ebs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
cover_ebs[cn] <- as.numeric (t(ons)%*%parm<=up_ebs&t(ons)%*%parm>=low_ebs)
low_ibs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
up_ibs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
cover_ibs[cn] <- as.numeric (t(ons)%*%parm<=up_ibs&t(ons)%*%parm>=low_ibs)
low_orc <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
up_orc <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
cover_orc[cn] <- as.numeric (t(ons)%*%parm<=up_orc&t(ons)%*%parm>=low_orc)
#cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
#cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
#cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
}
sg
rm(list=ls())
setwd("C:/Users/Hp/Documents/GitHub/Batch_Means_Online/logistic")
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 10
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e4+cutf;
#Significance level
qlev <- 0.05
crt_val <- qnorm(1-qlev/2)
#Iterations
alp <- .501
nparm <- 2
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
#1000  Replications to obtain stable mses
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 5 * eta[i] * gradnt_log(y[i],x[i,],sg[i-1,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
#critical value calculation
ons <- rep(1,nparm)
low_ebs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
up_ebs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
cover_ebs[cn] <- as.numeric (t(ons)%*%parm<=up_ebs&t(ons)%*%parm>=low_ebs)
low_ibs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
up_ibs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
cover_ibs[cn] <- as.numeric (t(ons)%*%parm<=up_ibs&t(ons)%*%parm>=low_ibs)
low_orc <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
up_orc <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
cover_orc[cn] <- as.numeric (t(ons)%*%parm<=up_orc&t(ons)%*%parm>=low_orc)
#cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
#cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
#cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
}
asg
rm(list=ls())
setwd("C:/Users/Hp/Documents/GitHub/Batch_Means_Online/logistic")
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 10
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e4+cutf;
#Significance level
qlev <- 0.05
crt_val <- qnorm(1-qlev/2)
#Iterations
alp <- .501
nparm <- 2
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
#1000  Replications to obtain stable mses
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 9 * eta[i] * gradnt_log(y[i],x[i,],sg[i-1,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
#critical value calculation
ons <- rep(1,nparm)
low_ebs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
up_ebs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
cover_ebs[cn] <- as.numeric (t(ons)%*%parm<=up_ebs&t(ons)%*%parm>=low_ebs)
low_ibs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
up_ibs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
cover_ibs[cn] <- as.numeric (t(ons)%*%parm<=up_ibs&t(ons)%*%parm>=low_ibs)
low_orc <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
up_orc <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
cover_orc[cn] <- as.numeric (t(ons)%*%parm<=up_orc&t(ons)%*%parm>=low_orc)
#cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
#cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
#cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
}
asg
rm(list=ls())
setwd("C:/Users/Hp/Documents/GitHub/Batch_Means_Online/logistic")
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 10
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e4+cutf;
#Significance level
qlev <- 0.05
crt_val <- qnorm(1-qlev/2)
#Iterations
alp <- .501
nparm <- 2
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
#1000  Replications to obtain stable mses
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 8 * eta[i] * gradnt_log(y[i],x[i,],sg[i-1,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
#critical value calculation
ons <- rep(1,nparm)
low_ebs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
up_ebs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
cover_ebs[cn] <- as.numeric (t(ons)%*%parm<=up_ebs&t(ons)%*%parm>=low_ebs)
low_ibs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
up_ibs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
cover_ibs[cn] <- as.numeric (t(ons)%*%parm<=up_ibs&t(ons)%*%parm>=low_ibs)
low_orc <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
up_orc <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
cover_orc[cn] <- as.numeric (t(ons)%*%parm<=up_orc&t(ons)%*%parm>=low_orc)
#cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
#cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
#cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
}
asg
ebs_mean
ibs_mean
cover_ebs
cover_ibs
cover_orc
ebs_mean
rm(list=ls())
setwd("C:/Users/Hp/Documents/GitHub/Batch_Means_Online/logistic")
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 10
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e5+cutf;
#Significance level
qlev <- 0.05
crt_val <- qnorm(1-qlev/2)
#Iterations
alp <- .501
nparm <- 2
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
#1000  Replications to obtain stable mses
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 8 * eta[i] * gradnt_log(y[i],x[i,],sg[i-1,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
#critical value calculation
ons <- rep(1,nparm)
low_ebs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
up_ebs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
cover_ebs[cn] <- as.numeric (t(ons)%*%parm<=up_ebs&t(ons)%*%parm>=low_ebs)
low_ibs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
up_ibs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
cover_ibs[cn] <- as.numeric (t(ons)%*%parm<=up_ibs&t(ons)%*%parm>=low_ibs)
low_orc <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
up_orc <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
cover_orc[cn] <- as.numeric (t(ons)%*%parm<=up_orc&t(ons)%*%parm>=low_orc)
#cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
#cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
#cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
}
cover_ebs
cover_ibs
cover_orc
rm(list=ls())
setwd("C:/Users/Hp/Documents/GitHub/Batch_Means_Online/logistic")
library(MASS)
library(matrixcalc)
source("gradnt_log.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 100
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e5+cutf;
#Significance level
qlev <- 0.05
crt_val <- qnorm(1-qlev/2)
#Iterations
alp <- .501
nparm <- 2
parm <- rep(5,nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ebs <- forb_ibs <- numeric(Rep)
volm_ebs <- volm_ibs <- numeric(Rep)
cover_ebs <- cover_ibs <- cover_orc <- numeric(Rep)
sigm <- matrix(rep(0,nparm^2),nrow=nparm,ncol=nparm)
niter <- 1e4
for ( rp in 1:niter){
x1 <- rnorm(nparm)
sigm <- sigm + x1%*%t(x1)/(c((1+exp(t(x1)%*%parm))*(1+exp(-t(x1)%*%parm))*niter))
}
#1000  Replications to obtain stable mses
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
p1 <- 1/(1 + exp(-x %*% parm))# Prob of success for 1 (1-p1 is for -1)
y<-2*rbinom(n,size=1,prob=p1)-1
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - 8 * eta[i] * gradnt_log(y[i],x[i,],sg[i-1,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#Variance-Covariance Estimate
ebs_mean <- ebs_batch_mean(sg_ct,alp)
ibs_mean <- ibs_jasa_mean(sg_ct,alp)
#Norm Difference
forb_ebs[cn] <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs[cn] <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
# Volume of the matrix
volm_ebs[cn] <- (det(ebs_mean))^(1/nparm)
volm_ibs[cn] <- (det(ibs_mean))^(1/nparm)
#critical value calculation
ons <- rep(1,nparm)
low_ebs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
up_ebs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ebs_mean%*%ons)/n)
cover_ebs[cn] <- as.numeric (t(ons)%*%parm<=up_ebs&t(ons)%*%parm>=low_ebs)
low_ibs <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
up_ibs <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%ibs_mean%*%ons)/n)
cover_ibs[cn] <- as.numeric (t(ons)%*%parm<=up_ibs&t(ons)%*%parm>=low_ibs)
low_orc <- t(ons)%*%asg-crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
up_orc <- t(ons)%*%asg+crt_val*sqrt((t(ons)%*%solve(sigm)%*%ons)/n)
cover_orc[cn] <- as.numeric (t(ons)%*%parm<=up_orc&t(ons)%*%parm>=low_orc)
#cover_ebs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ebs_mean)%*%(asg-parm)<=crt_val)
#cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%solve(ibs_mean)%*%(asg-parm)<=crt_val)
#cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
}
mean(cover_orc)
mean(cover(ibs))
mean(cover_ibs)
mean(cover_ebs)
