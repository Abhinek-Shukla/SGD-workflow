sd_volm[n,1] <- 0
sd_volm[n,2] <- sd( volm_ibs)/sqrt(Reps)
sd_volm[n,3:8] <- apply(volm_ebs[,1:6],2,sd)/sqrt(Reps)
}
for(n in 1:length(sq_n)){
load(paste("C:/Users/Hp/Documents/mcmc_with_rahul/latest_simul_results_matherver/forb_details_",sq_n[n],"_lin.RData",sep=""))
forb_all[n,1] <- 0
forb_all[n,2] <- mean( forb_ibs)
forb_all[n,3:8] <- colMeans(forb_ebs[,1:6])
sd_forb[n,1] <- 0
sd_forb[n,2] <- sd( forb_ibs)/sqrt(Reps)
sd_forb[n,3:8] <- apply(forb_ebs[,1:6],2,sd)/sqrt(Reps)
}
sq_n <- log10(c(5e4,1e5,2e5,5e5,1e6,5e6))
df <- as.data.frame(cbind(sq_n,cover_all))
colnames(df) <- c("Sample_Size","Oracle", "IBS","c=0.1 beta1","c=0.1 beta2", "c=0.1 beta3", "c=1 beta1",  "c=1 beta2", "c=1 beta3")
library(reshape2)
df <- melt(df, id.vars="Sample_Size")
library(ggplot2)
p<- ggplot(df, aes(Sample_Size,value, col=variable)) +
geom_point()+geom_line()+ geom_errorbar(aes(ymax = cover_all + sd_cover,
ymin = cover_all - sd_cover),width=0.08)+
scale_colour_discrete(name="Estimators")+
xlab("Sample Size (Log10 scale)") +
ylab("Coverage Rates")
print(p)
df <- as.data.frame(cbind(sq_n,volm_all))
colnames(df) <- c("Sample_Size","Oracle", "IBS","c=0.1 beta1","c=0.1 beta2", "c=0.1 beta3", "c=1 beta1",  "c=1 beta2", "c=1 beta3")
library(reshape2)
df <- melt(df, id.vars="Sample_Size")
library(ggplot2)
p<- ggplot(df, aes(Sample_Size,value, col=variable)) +
geom_point()+geom_line()+ geom_errorbar(aes(ymax = volm_all + sd_volm,
ymin = volm_all - sd_volm),width=0.08)+
scale_colour_discrete(name="Estimators")+
xlab("Sample Size (Log10 scale)") +
ylab("Volume")
print(p)
df <- as.data.frame(cbind(sq_n,forb_norm_all))
colnames(df) <- c("Sample_Size","Oracle", "IBS","c=0.1 beta1","c=0.1 beta2", "c=0.1 beta3", "c=1 beta1",  "c=1 beta2", "c=1 beta3")
library(reshape2)
df <- melt(df, id.vars="Sample_Size")
library(ggplot2)
p<- ggplot(df, aes(Sample_Size,value, col=variable)) +
geom_point()+geom_line()+ geom_errorbar(aes(ymax = forb_norm_all + sd_forb_norm,
ymin = forb_norm_all - sd_forb_norm),width=0.08)+
scale_colour_discrete(name="Estimators")+
xlab("Sample Size (Log10 scale)") +
ylab("Self Frobenius Norm")
print(p)
df <- as.data.frame(cbind(sq_n,forb_all))
colnames(df) <- c("Sample_Size","Oracle", "IBS","c=0.1 beta1","c=0.1 beta2", "c=0.1 beta3", "c=1 beta1",  "c=1 beta2", "c=1 beta3")
library(reshape2)
df <- melt(df, id.vars="Sample_Size")
library(ggplot2)
p<- ggplot(df, aes(Sample_Size,value, col=variable)) +
geom_point()+geom_line()+ geom_errorbar(aes(ymax = forb_all + sd_forb,
ymin = forb_all - sd_forb),width=0.08)+
scale_colour_discrete(name="Estimators")+
xlab("Sample Size (Log10 scale)") +
ylab("Relative Frobenius Norm")
print(p)
rm(list = ls())
sq_n <- c("5e4","1e5","2e5","5e5","1e6","5e6")
cover_all <- forb_norm_all  <- matrix(nrow=length(sq_n),ncol=8)
volm_all <- sd_volm <- matrix(nrow=length(sq_n),ncol=8)
forb_all <- sd_forb <- matrix(nrow=length(sq_n),ncol=8)
sd_cover <- sd_forb_norm <- matrix(nrow=length(sq_n),ncol=8)
for(n in 1:length(sq_n)){
load(paste("C:/Users/Hp/Documents/mcmc_with_rahul/latest_simul_results_matherver/cover_details_",sq_n[n],"_lin.RData",sep=""))
cover_all[n,1] <- mean( cover_orc)
cover_all[n,2] <- mean( cover_ibs)
cover_all[n,3:8] <- colMeans(cover_ebs[,1:6])
Reps <- length(cover_orc)
sd_cover[n,1] <- sd( cover_orc)/sqrt(Reps)
sd_cover[n,2] <- sd( cover_ibs)/sqrt(Reps)
sd_cover[n,3:8] <- apply(cover_ebs[,1:6],2,sd)/sqrt(Reps)
}
for(n in 1:length(sq_n)){
load(paste("C:/Users/Hp/Documents/mcmc_with_rahul/latest_simul_results_matherver/forb_norm_details_",sq_n[n],"_lin.RData",sep=""))
forb_norm_all[n,1] <- sqrt(5)
forb_norm_all[n,2] <- mean( forb_ibs_norm)
forb_norm_all[n,3:8] <- colMeans(forb_ebs_norm[,1:6])
sd_forb_norm[n,1] <- 0
sd_forb_norm[n,2] <- sd( forb_ibs_norm)/sqrt(Reps)
sd_forb_norm[n,3:8] <- apply(forb_ebs_norm[,1:6],2,sd)/sqrt(Reps)
}
for(n in 1:length(sq_n)){
load(paste("C:/Users/Hp/Documents/mcmc_with_rahul/latest_simul_results_matherver/volm_details_",sq_n[n],"_lin.RData",sep=""))
volm_all[n,1] <- 1
volm_all[n,2] <- mean( volm_ibs)
volm_all[n,3:8] <- colMeans(volm_ebs[,1:6])
sd_volm[n,1] <- 0
sd_volm[n,2] <- sd( volm_ibs)/sqrt(Reps)
sd_volm[n,3:8] <- apply(volm_ebs[,1:6],2,sd)/sqrt(Reps)
}
for(n in 1:length(sq_n)){
load(paste("C:/Users/Hp/Documents/mcmc_with_rahul/latest_simul_results_matherver/forb_details_",sq_n[n],"_lin.RData",sep=""))
forb_all[n,1] <- 0
forb_all[n,2] <- mean( forb_ibs)
forb_all[n,3:8] <- colMeans(forb_ebs[,1:6])
sd_forb[n,1] <- 0
sd_forb[n,2] <- sd( forb_ibs)/sqrt(Reps)
sd_forb[n,3:8] <- apply(forb_ebs[,1:6],2,sd)/sqrt(Reps)
}
sq_n <- log10(c(5e4,1e5,2e5,5e5,1e6,5e6))
df <- as.data.frame(cbind(sq_n,cover_all))
colnames(df) <- c("Sample_Size","Oracle", "IBS","c=0.1 beta1","c=0.1 beta2", "c=0.1 beta3", "c=1 beta1",  "c=1 beta2", "c=1 beta3")
library(reshape2)
df <- melt(df, id.vars="Sample_Size")
library(ggplot2)
p<- ggplot(df, aes(Sample_Size,value, col=variable)) +
geom_point()+geom_line()+ geom_errorbar(aes(ymax = cover_all + sd_cover,
ymin = cover_all - sd_cover),width=0.08)+
scale_colour_discrete(name="Estimators")+
xlab("Sample Size (Log10 scale)") +
ylab("Coverage Rates")
print(p)
df <- as.data.frame(cbind(sq_n,volm_all))
colnames(df) <- c("Sample_Size","Oracle", "IBS","c=0.1 beta1","c=0.1 beta2", "c=0.1 beta3", "c=1 beta1",  "c=1 beta2", "c=1 beta3")
library(reshape2)
df <- melt(df, id.vars="Sample_Size")
library(ggplot2)
p<- ggplot(df, aes(Sample_Size,value, col=variable)) +
geom_point()+geom_line()+ geom_errorbar(aes(ymax = volm_all + sd_volm,
ymin = volm_all - sd_volm),width=0.08)+
scale_colour_discrete(name="Estimators")+
xlab("Sample Size (Log10 scale)") +
ylab("Volume")
print(p)
df <- as.data.frame(cbind(sq_n,forb_norm_all))
colnames(df) <- c("Sample_Size","Oracle", "IBS","c=0.1 beta1","c=0.1 beta2", "c=0.1 beta3", "c=1 beta1",  "c=1 beta2", "c=1 beta3")
library(reshape2)
df <- melt(df, id.vars="Sample_Size")
library(ggplot2)
p<- ggplot(df, aes(Sample_Size,value, col=variable)) +
geom_point()+geom_line()+ geom_errorbar(aes(ymax = forb_norm_all + sd_forb_norm,
ymin = forb_norm_all - sd_forb_norm),width=0.08)+
scale_colour_discrete(name="Estimators")+
xlab("Sample Size (Log10 scale)") +
ylab("Self Frobenius Norm")
print(p)
df <- as.data.frame(cbind(sq_n,forb_all))
colnames(df) <- c("Sample_Size","Oracle", "IBS","c=0.1 beta1","c=0.1 beta2", "c=0.1 beta3", "c=1 beta1",  "c=1 beta2", "c=1 beta3")
library(reshape2)
df <- melt(df, id.vars="Sample_Size")
library(ggplot2)
p<- ggplot(df, aes(Sample_Size,value, col=variable)) +
geom_point()+geom_line()+ geom_errorbar(aes(ymax = forb_all + sd_forb,
ymin = forb_all - sd_forb),width=0.08)+
scale_colour_discrete(name="Estimators")+
xlab("Sample Size (Log10 scale)") +
ylab("Relative Frobenius Norm")
print(p)
sqrt(1000)
p<- ggplot(df, aes(Sample_Size,value, col=variable)) +
geom_point()+geom_line()+ geom_errorbar(aes(ymax = forb_all + sd_forb,
ymin = forb_all - sd_forb),width=0.05)+
scale_colour_discrete(name="Estimators")+
xlab("Sample Size (Log10 scale)") +
ylab("Relative Frobenius Norm")
print(p)
rm(list=ls())
library(MASS)
library(matrixcalc)
setwd("C:/Users/Hp/Documents/GitHub/Batch_Means_Online/linear")
source("grad_lin.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 1000
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e5+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .51
nparm <- 5
parm <- rep(5,nparm)
crt_val <- qchisq(qlev,df=nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ibs <- volm_ibs <- cover_ibs <- forb_ibs_norm <- numeric(Rep)
cover_orc<- numeric(Rep)
volm_ebs <- forb_ebs <- forb_ebs_norm <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
cover_ebs  <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
volm_ebs_ls <- forb_ebs_ls <- forb_ebs_norm_ls <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
cover_ebs_ls  <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
cns = c(0.1,1)
#1000  Replications to obtain stable results
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
#noisy Observed Data
y <- x %*% parm + rnorm(n, mean = 0,sd = 1)
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - .5 * eta[i] * grad_lin(sg[i-1,],y[i],x[i,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#IBS and Oracle related coverages and volume
ibs_mean     <- ibs_jasa_mean(sg_ct,alp)
forb_ibs[cn]  <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs_norm[cn] <- sqrt(sum((ibs_mean)^2))
volm_ibs[cn]  <- (det(ibs_mean))^(1/nparm)
cover_ibs[cn] <- as.numeric(n*t(asg - parm)%*%qr.solve(ibs_mean)%*%(asg - parm) <= crt_val)
cover_orc[cn] <- as.numeric(n*t(asg - parm)%*%solve(sigm)%*%(asg - parm) <= crt_val)
count=1
#Nine different settings of EBS, c=0.1,1,2
for( mk in 1:length(cns)){
for(bk in 1:3){
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk,1)
forb_ebs_norm[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk,2)
forb_ebs_norm_ls[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs_ls[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs_ls[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs_ls[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
count=count+1
}
}
}
rm(list=ls())
library(MASS)
library(matrixcalc)
setwd("C:/Users/Hp/Documents/GitHub/Batch_Means_Online/linear")
source("grad_lin.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 100
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e5+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .51
nparm <- 5
parm <- rep(5,nparm)
crt_val <- qchisq(qlev,df=nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ibs <- volm_ibs <- cover_ibs <- forb_ibs_norm <- numeric(Rep)
cover_orc<- numeric(Rep)
volm_ebs <- forb_ebs <- forb_ebs_norm <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
cover_ebs  <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
volm_ebs_ls <- forb_ebs_ls <- forb_ebs_norm_ls <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
cover_ebs_ls  <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
cns = c(0.1,1)
#1000  Replications to obtain stable results
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
#noisy Observed Data
y <- x %*% parm + rnorm(n, mean = 0,sd = 1)
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - .5 * eta[i] * grad_lin(sg[i-1,],y[i],x[i,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#IBS and Oracle related coverages and volume
ibs_mean     <- ibs_jasa_mean(sg_ct,alp)
forb_ibs[cn]  <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs_norm[cn] <- sqrt(sum((ibs_mean)^2))
volm_ibs[cn]  <- (det(ibs_mean))^(1/nparm)
cover_ibs[cn] <- as.numeric(n*t(asg - parm)%*%qr.solve(ibs_mean)%*%(asg - parm) <= crt_val)
cover_orc[cn] <- as.numeric(n*t(asg - parm)%*%solve(sigm)%*%(asg - parm) <= crt_val)
count=1
#Nine different settings of EBS, c=0.1,1,2
for( mk in 1:length(cns)){
for(bk in 1:3){
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk,1)
forb_ebs_norm[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk,2)
forb_ebs_norm_ls[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs_ls[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs_ls[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs_ls[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
count=count+1
}
}
}
mean(cover_ibs)
mean(cover_orc)
colMeans(cover_ebs)
warnings()
mean(cover_ibs)
mean(cover_orc)
colMeans(cover_ebs)
colMeans(cover_ebs_ls)
colMeans(volm_ebs_ls)
colMeans(volm_ebs)
colMeans(forb_ebs)
colMeans(forb_ebs_ls)
colMeans(forb_ebs_norm_ls)
colMeans(forb_ebs_norm)
forb_ebs_ls
cover_ebs_ls
volm_ebs_ls
forb_ebs_ls
rm(list=ls())
library(MASS)
library(matrixcalc)
source("grad_lin.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 10
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e5+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .51
nparm <- 5
parm <- rep(5,nparm)
crt_val <- qchisq(qlev,df=nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ibs <- volm_ibs <- cover_ibs <- forb_ibs_norm <- numeric(Rep)
cover_orc<- numeric(Rep)
volm_ebs <- forb_ebs <- forb_ebs_norm <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
cover_ebs  <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
volm_ebs_ls <- forb_ebs_ls <- forb_ebs_norm_ls <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
cover_ebs_ls  <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
cns = c(0.1,1)
#1000  Replications to obtain stable results
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
#noisy Observed Data
y <- x %*% parm + rnorm(n, mean = 0,sd = 1)
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - .5 * eta[i] * grad_lin(sg[i-1,],y[i],x[i,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#IBS and Oracle related coverages and volume
ibs_mean     <- ibs_jasa_mean(sg_ct,alp)
forb_ibs[cn]  <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs_norm[cn] <- sqrt(sum((ibs_mean)^2))
volm_ibs[cn]  <- (det(ibs_mean))^(1/nparm)
cover_ibs[cn] <- as.numeric(n*t(asg - parm)%*%qr.solve(ibs_mean)%*%(asg - parm) <= crt_val)
cover_orc[cn] <- as.numeric(n*t(asg - parm)%*%solve(sigm)%*%(asg - parm) <= crt_val)
count=1
#Nine different settings of EBS, c=0.1,1,2
for( mk in 1:length(cns)){
for(bk in 1:3){
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk,1)
forb_ebs_norm[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk,2)
forb_ebs_norm_ls[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs_ls[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs_ls[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs_ls[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
count=count+1
}
}
}
save(forb_ibs,forb_ebs,forb_ebs_ls,file="forb_details_1e5_lin.RData")
save(volm_ibs,volm_ebs,volm_ebs_ls,file="volm_details_1e5_lin.RData")
save(cover_orc,cover_ibs,cover_ebs,cover_ebs_ls,file="cover_details_1e5_lin.RData")
save(forb_ibs_norm,forb_ebs_norm,forb_ebs_ls,file="forb_norm_details_1e5_lin.RData")
rm(list=ls())
library(MASS)
library(matrixcalc)
source("grad_lin.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
st <- Sys.time()
Rep <- 1
cutf <- 10000 #Dropping initial Iterates of SGD
#Sample Size
n <- 5e6+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .51
nparm <- 5
parm <- rep(5,nparm)
crt_val <- qchisq(qlev,df=nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ibs <- volm_ibs <- cover_ibs <- forb_ibs_norm <- numeric(Rep)
cover_orc<- numeric(Rep)
volm_ebs <- forb_ebs <- forb_ebs_norm <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
cover_ebs  <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
volm_ebs_ls <- forb_ebs_ls <- forb_ebs_norm_ls <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
cover_ebs_ls  <- matrix(rep(0,6*Rep),nrow = Rep,ncol = 6)
cns = c(0.1,1)
#1000  Replications to obtain stable results
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
#noisy Observed Data
y <- x %*% parm + rnorm(n, mean = 0,sd = 1)
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - .5 * eta[i] * grad_lin(sg[i-1,],y[i],x[i,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#IBS and Oracle related coverages and volume
ibs_mean     <- ibs_jasa_mean(sg_ct,alp)
forb_ibs[cn]  <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs_norm[cn] <- sqrt(sum((ibs_mean)^2))
volm_ibs[cn]  <- (det(ibs_mean))^(1/nparm)
cover_ibs[cn] <- as.numeric(n*t(asg - parm)%*%qr.solve(ibs_mean)%*%(asg - parm) <= crt_val)
cover_orc[cn] <- as.numeric(n*t(asg - parm)%*%solve(sigm)%*%(asg - parm) <= crt_val)
count=1
#Nine different settings of EBS, c=0.1,1,2
for( mk in 1:length(cns)){
for(bk in 1:3){
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk,1)
forb_ebs_norm[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk,2)
forb_ebs_norm_ls[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs_ls[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs_ls[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs_ls[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
count=count+1
}
}
}
print(difftime(Sys.time(),st,units="secs"))
getwd()
setwd("C:/Users/Hp/Documents/GitHub/Batch_Means_Online")
rm(list=ls())
library(MASS)
source("linear/grad_lin_and_batch.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
linear_batch_fn(max_sam = 1e5, burn_in = 1000, nparm = 5, Rep = 1,  eta_cns = 0.5, qlev = 0.95, alp = .51, cns = c(0.1, 1) )
rm(list=ls())
library(MASS)
source("linear/grad_lin_and_batch.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
linear_batch_fn(max_sam = 1e5, burn_in = 1000, nparm = 5, Rep = 1,  eta_cns = 0.5, qlev = 0.95, alp = .51, cns = c(0.1, 1) )
rm(list=ls())
forb_ibs_norm
load("linear/linear_indep_rep_1_dim_5.RData")
forb_ibs_norm
