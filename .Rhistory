# Initialization
N         <- 500
x         <- seq(1, N)
A_true    <- c(4.5, 3.5, 2.5, 1.0)
b_true    <- c(0.5, 0.2, 0.05, 0.01)
alph_true <- c(0.066, 0.1, 0.01, 0.2)
c_true    <- c(0.1, 0.2, 0.03, 0.01)
thet_true <- c(0.532, 0.264, 0.128, 0.03)
phi_true  <- c(0.7, 0.5, 0.2, 0.014)
Reps      <- 100;
q         <- 2;#length(A_true)
true_values <- numeric(q*6);
for (j in 1:q){
indx        <- ((j-1)*6 + 1):(j*6);
true_values[indx] <- c(A_true[j],
b_true[j],
alph_true[j],
c_true[j],
thet_true[j],
phi_true[j])
}
bias      <- matrix(0, nrow = Reps, ncol = length(true_values))
mse       <- matrix(0, nrow = Reps, ncol = length(true_values))
est       <- matrix(0, nrow = Reps, ncol = length(true_values))
bias_true <- matrix(0, nrow = Reps, ncol = length(true_values))
mse_true  <- matrix(0, nrow = Reps, ncol = length(true_values))
est_true  <- matrix(0, nrow = Reps, ncol = length(true_values))
detrm = 0;
for (j in 1:q){
exp_trm <- exp(b_true[j] * (1 - cos(alph_true[j]*x + c_true[j])))
detrm   <- detrm + A_true[j] * exp_trm * cos(thet_true[j]*x + phi_true[j]);
}
system.time(
for (rep in 1:Reps){
set.seed(rep)
# Data generation
y <- y0 <- y_true <- detrm + rnorm(N, mean = 0, sd = 1);
estimated_params      = numeric(6);
estimated_params_true = numeric(6)
for (j in 1:q){
# Perform optimization using Nelder-Mead method
result2 <- optim(par = grid_srch(x, y), fn = objective_function_cos,
x = x, y = y,  method = "Nelder-Mead")
estimated_params[5] <- result2$par
W       = cbind(cos(estimated_params[5]*x), sin(estimated_params[5]*x));
A_trunc = solve(t(W)%*%W)%*%t(W)%*%y;
tmp     = sqrt(A_trunc[1]^2 + A_trunc[2]^2);
estimated_params[6] = -atan( A_trunc[2]/ A_trunc[1]);
y_new   <- log(abs(y/(tmp*cos(estimated_params[5]*x + estimated_params[6]))))
result3 <- optim(par = grid_srch(x, y_new), fn = objective_function_cos, x = x,
y = y_new,  method = "Nelder-Mead")
estimated_params[3] <- result3$par
W       = cbind(cos(estimated_params[3]*x), sin(estimated_params[3]*x));
b_trunc = solve(t(W)%*%W)%*%t(W)%*%y_new;
estimated_params[2] = sqrt(b_trunc[1]^2 + b_trunc[2]^2);
estimated_params[4] = -atan( b_trunc[2]/ b_trunc[1]);
exp_trm <- exp(estimated_params[2] * (1 - cos(estimated_params[3]*x
+ estimated_params[4])))
W   <- exp_trm * cos(estimated_params[5]*x + estimated_params[6]);
estimated_params[1] = solve(t(W)%*%W)%*%t(W)%*%y
estimated_params <- optim(par = estimated_params, fn = objective_function_compl,
x = x, y = y,  method = "Nelder-Mead")$par
# Update y for next component estimation
y = y - model_function_new(estimated_params, x, y)
bias[rep, ((j-1)*6 + 1):(j*6)] = (estimated_params -
true_values[((j-1)*6 + 1):(j*6)])
mse[rep, ((j-1)*6 + 1):(j*6)]  = (estimated_params -
true_values[((j-1)*6 + 1):(j*6)])^2
est[rep, ((j-1)*6 + 1):(j*6)]  = estimated_params;
estimated_params_true <- optim(par = true_values[1:6], fn = objective_function_compl,
x = x, y = y_true,  method = "Nelder-Mead")$par
# Update y for next component estimation
y_true = y_true - model_function_new(estimated_params_true, x, y)
bias_true[rep, ((j-1)*6 + 1):(j*6)] = (estimated_params_true -
true_values[((j-1)*6 + 1):(j*6)])
mse_true[rep, ((j-1)*6 + 1):(j*6)]  = (estimated_params_true -
true_values[((j-1)*6 + 1):(j*6)])^2
est_true[rep, ((j-1)*6 + 1):(j*6)]  = estimated_params_true;
}
}
)
avg_bias      = colMeans(bias)
avg_mse       = colMeans(mse)
avg_est       = colMeans(est)
avg_bias_true = colMeans(bias_true)
avg_mse_true  = colMeans(mse_true)
avg_est_true  = colMeans(est_true)
cbind(true_values, avg_est, avg_est_true, avg_bias, avg_bias_true, avg_mse, avg_mse_true)
# Define the non-linear model function for LSE:
model_function_all <- function(params, x) {
y_est <- numeric(N);
for (j in 1:q){
A    <- params[(j-1)*6 + 1];
b    <- params[(j-1)*6 + 2];
alph <- params[(j-1)*6 + 3];
c    <- params[(j-1)*6 + 4];
thet <- params[(j-1)*6 + 5];
phi  <- params[(j-1)*6 + 6];
exp_trm = exp(b * (1 - cos(alph*x + c)));
y_est = y_est + A * exp_trm * cos(thet*x + phi);
}
return(y_est)
}
# Define the non-linear model function for each component:
model_function <- function(params, x, y) {
A    <- params[1];
b    <- params[2];
alph <- params[3];
c    <- params[4];
thet <- params[5];
phi  <- params[6];
exp_trm = exp(b * (1 - cos(alph*x + c)));
W       = exp_trm * cos(thet*x + phi);
A       = solve(t(W)%*%W)%*%t(W)%*%y;
return(A[1] * exp_trm * cos(thet*x + phi))
}
# Define the non-linear model function without computing A:
model_function_new <- function(params, x, y) {
A    <- params[1];
b    <- params[2];
alph <- params[3];
c    <- params[4];
thet <- params[5];
phi  <- params[6];
exp_trm = exp(b * (1 - cos(alph*x + c)));
return(A[1] * exp_trm * cos(thet*x + phi))
}
# Model based on cosine only
model_function_cos <- function(params, x, y) {
thet <- params[1];
W       = cbind(cos(thet*x), sin(thet*x));
A_trunc = solve(t(W)%*%W)%*%t(W)%*%y;
return(cbind(cos(thet*x), sin(thet*x))%*%A_trunc)
}
# This computes the sum of squared errors between the observed y
# and the model-predicted y based on cosine only
objective_function_cos <- function(params, x, y) {
y_pred <- model_function_cos(params, x, y)
return(sum((y - y_pred)^2))
}
objective_function_compl <- function(params, x, y) {
y_pred <- model_function_new(params, x, y)
return(sum((y - y_pred)^2))
}
obj_all_compl <- function(params, x, y) {
y_pred <- model_function_all(params, x)
return(sum((y - y_pred)^2))
}
grid_srch <- function(x, y){
x_grid    <- seq(0.0001, (1-0.0001)*pi, length.out = N)
best_x    <- NA
min_value <- Inf
# Perform the grid search
for (i in x_grid) {
value <- sum((y - model_function_cos(i, x, y))^2)
if (value < min_value) {
min_value <- value
best_x    <- i
}
}
return(best_x)
}
# Initialization
N         <- 500
x         <- seq(1, N)
A_true    <- c(4.5, 3.5, 2.5, 1.0)
b_true    <- c(0.5, 0.2, 0.05, 0.01)
alph_true <- c(0.066, 0.1, 0.01, 0.2)
c_true    <- c(0.1, 0.2, 0.03, 0.01)
thet_true <- c(0.532, 0.264, 0.128, 0.03)
phi_true  <- c(0.7, 0.5, 0.2, 0.014)
Reps      <- 100;
q         <- 2;#length(A_true)
true_values <- numeric(q*6);
for (j in 1:q){
indx        <- ((j-1)*6 + 1):(j*6);
true_values[indx] <- c(A_true[j],
b_true[j],
alph_true[j],
c_true[j],
thet_true[j],
phi_true[j])
}
bias      <- matrix(0, nrow = Reps, ncol = length(true_values))
mse       <- matrix(0, nrow = Reps, ncol = length(true_values))
est       <- matrix(0, nrow = Reps, ncol = length(true_values))
bias_true <- matrix(0, nrow = Reps, ncol = length(true_values))
mse_true  <- matrix(0, nrow = Reps, ncol = length(true_values))
est_true  <- matrix(0, nrow = Reps, ncol = length(true_values))
detrm = 0;
for (j in 1:q){
exp_trm <- exp(b_true[j] * (1 - cos(alph_true[j]*x + c_true[j])))
detrm   <- detrm + A_true[j] * exp_trm * cos(thet_true[j]*x + phi_true[j]);
}
system.time(
for (rep in 1:Reps){
set.seed(rep)
# Data generation
y <- y0 <- y_true <- detrm + rnorm(N, mean = 0, sd = 1);
estimated_params      = numeric(6);
estimated_params_true = numeric(6)
for (j in 1:q){
# Perform optimization using Nelder-Mead method
result2 <- optim(par = grid_srch(x, y), fn = objective_function_cos,
x = x, y = y,  method = "Nelder-Mead")
estimated_params[5] <- result2$par
W       = cbind(cos(estimated_params[5]*x), sin(estimated_params[5]*x));
A_trunc = solve(t(W)%*%W)%*%t(W)%*%y;
tmp     = sqrt(A_trunc[1]^2 + A_trunc[2]^2);
estimated_params[6] = -atan( A_trunc[2]/ A_trunc[1]);
y_new   <- log(abs(y/(tmp*cos(estimated_params[5]*x + estimated_params[6]))))
result3 <- optim(par = grid_srch(x, y_new), fn = objective_function_cos, x = x,
y = y_new,  method = "Nelder-Mead")
estimated_params[3] <- result3$par
W       = cbind(cos(estimated_params[3]*x), sin(estimated_params[3]*x));
b_trunc = solve(t(W)%*%W)%*%t(W)%*%y_new;
estimated_params[2] = sqrt(b_trunc[1]^2 + b_trunc[2]^2);
estimated_params[4] = -atan( b_trunc[2]/ b_trunc[1]);
exp_trm <- exp(estimated_params[2] * (1 - cos(estimated_params[3]*x
+ estimated_params[4])))
W   <- exp_trm * cos(estimated_params[5]*x + estimated_params[6]);
estimated_params[1] = solve(t(W)%*%W)%*%t(W)%*%y
estimated_params <- optim(par = estimated_params, fn = objective_function_compl,
x = x, y = y,  method = "Nelder-Mead")$par
# Update y for next component estimation
y = y - model_function_new(estimated_params, x, y)
bias[rep, ((j-1)*6 + 1):(j*6)] = (estimated_params -
true_values[((j-1)*6 + 1):(j*6)])
mse[rep, ((j-1)*6 + 1):(j*6)]  = (estimated_params -
true_values[((j-1)*6 + 1):(j*6)])^2
est[rep, ((j-1)*6 + 1):(j*6)]  = estimated_params;
estimated_params_true <- optim(par = true_values[((j-1)*6 + 1):(j*6)], fn = objective_function_compl,
x = x, y = y_true,  method = "Nelder-Mead")$par
# Update y for next component estimation
y_true = y_true - model_function_new(estimated_params_true, x, y)
bias_true[rep, ((j-1)*6 + 1):(j*6)] = (estimated_params_true -
true_values[((j-1)*6 + 1):(j*6)])
mse_true[rep, ((j-1)*6 + 1):(j*6)]  = (estimated_params_true -
true_values[((j-1)*6 + 1):(j*6)])^2
est_true[rep, ((j-1)*6 + 1):(j*6)]  = estimated_params_true;
}
# estim_all = optim(par = estim_all, fn = obj_all_compl,
#                   x = x,
#                   y = y0,  method = "Nelder-Mead")$par
# y_est_all_comp = model_function_all(estim_all, x)
# Residual = sum((y_est_all_comp - y0)^2)/N
}
)
avg_bias      = colMeans(bias)
avg_mse       = colMeans(mse)
avg_est       = colMeans(est)
avg_bias_true = colMeans(bias_true)
avg_mse_true  = colMeans(mse_true)
avg_est_true  = colMeans(est_true)
cbind(true_values, avg_est, avg_est_true, avg_bias, avg_bias_true, avg_mse, avg_mse_true)
#
# sq_comp <- 1:q
# pdf(file = "sequent_fit_simul_true_val.pdf")
# par(oma = c(4,1,1,1), mfrow = c(2, 2), mar = c(2, 2, 1, 1))
# for (j in sq_comp){
#   N_p = N
#   # Plot the results
#   plot(x[1:N_p], y0[1:N_p], main = paste(j, "- component Fit simulated data"), xlab = "x", ylab = "y",
#        pch = 16, col = "blue", type = "l", lwd = 2)
#
#   lines(x[1:N_p], colSums(y_est_all[1:j, 1:N_p]), col = "red", lwd = 2)
# }
# # legend("topright", legend = c("Observed", "Fitted"), col = c("blue", "red"),
# #        pch = c(16, NA), lty = c(NA, 1))
# par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
# plot(0, 0, type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n')
# legend('bottom',legend = c("Simulated", "Fitted"), col = c("blue", "red"),
#        lwd = 5, xpd = TRUE, horiz = TRUE, cex = 1, seg.len=1, bty = 'n')
# dev.off()
###########################################################
## Simulation and Examples
###########################################################
############### Section 6.1  ##############################
#### Dimension 5 - independent ###########
nparm <- 5
sq_n <- c("5e4","1e5","2e5","5e5","8e5","1e6","5e6")
names_est <- c("Oracle", "IBS", "Pc.1b1", "Pc.1b2", "Pc.1b3", "c.1b1", "c.1b2",
"c.1b3", "PLc.1b1", "PLc.1b2", "PLc.1b3", "Lc.1b1", "Lc.1b2", "Lc.1b3")
dnames <-  list(sq_n, names_est)
cover_all         <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
marg_covg         <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
marg_covg_volm    <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
forb_norm_all     <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
volm_all          <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_volm           <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
frob_all          <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_forb           <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_cover          <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_marg_covg      <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_marg_covg_volm <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_forb_norm      <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
interv_ratio      <- array(dim = c(length(sq_n), 12, nparm), dimnames = list(1 : length(sq_n), 1 : 12, 1 : nparm))
sd_interv_ratio   <-  array(dim = c(length(sq_n), 12, nparm), dimnames = list(1 : length(sq_n), 1 : 12, 1 : nparm))
load("Examples/linear/out/linear_indep_n_5e+06_dim_5.RData")
setwd("~/GitHub/SGD-workflow")
###########################################################
## Simulation and Examples
###########################################################
############### Section 6.1  ##############################
#### Dimension 5 - independent ###########
nparm <- 5
sq_n <- c("5e4","1e5","2e5","5e5","8e5","1e6","5e6")
names_est <- c("Oracle", "IBS", "Pc.1b1", "Pc.1b2", "Pc.1b3", "c.1b1", "c.1b2",
"c.1b3", "PLc.1b1", "PLc.1b2", "PLc.1b3", "Lc.1b1", "Lc.1b2", "Lc.1b3")
dnames <-  list(sq_n, names_est)
cover_all         <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
marg_covg         <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
marg_covg_volm    <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
forb_norm_all     <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
volm_all          <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_volm           <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
frob_all          <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_forb           <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_cover          <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_marg_covg      <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_marg_covg_volm <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_forb_norm      <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
interv_ratio      <- array(dim = c(length(sq_n), 12, nparm), dimnames = list(1 : length(sq_n), 1 : 12, 1 : nparm))
sd_interv_ratio   <-  array(dim = c(length(sq_n), 12, nparm), dimnames = list(1 : length(sq_n), 1 : 12, 1 : nparm))
load("Examples/linear/out/linear_indep_n_5e+06_dim_5.RData")
for(n in 1 : length(sq_n))
{
##### Calculate COVERAGE RATES  #####
cover_all[n, 1] <- mean(cover_orc[,n])
cover_all[n, 2] <- mean(cover_ibs[,n])
cover_all[n, 3 : 14] <- c(colMeans(cover_ebs_poly[n, , ]),
colMeans(cover_ebs[n, , ]), colMeans(cover_ebs_ls_poly[n, , ])
, colMeans(cover_ebs_ls[n, , ]))
Reps <- length(cover_orc)
sd_cover[n, 1] <- sd( cover_orc[, n]) / sqrt(Reps)
sd_cover[n, 2] <- sd( cover_ibs[, n]) / sqrt(Reps)
sd_cover[n, 3 : 14] <- c(apply(cover_ebs_poly[n, , ], 2, sd),
apply(cover_ebs[n, , ], 2, sd),
apply(cover_ebs_ls_poly[n, , ], 2, sd), apply(cover_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
##### Calculate Frobenius Norm  #####
frob_all[n, 1] <- 0
frob_all[n, 2] <- mean( forb_ibs[, n])
frob_all[n, 3 : 14] <- c(colMeans(forb_ebs_poly[n, , ]),
colMeans(forb_ebs[n, , ]), colMeans(forb_ebs_ls_poly[n, , ]), colMeans(forb_ebs_ls[n, , ]))
sd_forb[n, 1] <- 0
sd_forb[n, 2] <- sd( forb_ibs[, n]) / sqrt(Reps)
sd_forb[n, 3 : 14] <- c(apply(forb_ebs_poly[n, , ], 2, sd),
apply(forb_ebs[n, , ], 2, sd), apply(forb_ebs_ls_poly[n, , ], 2, sd),
apply(forb_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
##### MARGINAL  SIMULTANEOUS COVERAGE #####
marg_covg[n, 1] <- mean( marg_sim_cov_orc[,n])
marg_covg[n, 2] <- mean( marg_sim_cov_ibs[,n])
marg_covg[n, 3 : 14] <- c(colMeans(marg_sim_cov_ebs_poly[n, , ]),
colMeans(marg_sim_cov_ebs[n, , ]), colMeans(marg_sim_cov_ebs_ls_poly[n, , ]),
colMeans(marg_sim_cov_ebs_ls[n, , ]))
Reps <- length(cover_orc)
sd_marg_covg[n, 1] <- sd( marg_sim_cov_orc[, n]) / sqrt(Reps)
sd_marg_covg[n, 2] <- sd( marg_sim_cov_ibs[, n]) / sqrt(Reps)
sd_marg_covg[n, 3 : 14] <- c(apply(marg_sim_cov_ebs_poly[n, , ], 2, sd),
apply(marg_sim_cov_ebs[n, , ], 2, sd),
apply(marg_sim_cov_ebs_ls_poly[n, , ], 2, sd),
apply(marg_sim_cov_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
##### MEASURE OF VOLUME COMPROMISED DUE TO MARGINALISING SIMULTANEOUS ASSESSMENT #####
marg_covg_volm[n, 1] <- mean( marg_volm_orc[,n])
marg_covg_volm[n, 2] <- mean( marg_volm_ibs[,n])
marg_covg_volm[n, 3 : 14] <- c(colMeans(marg_volm_ebs_poly[n, , ]),
colMeans(marg_volm_ebs[n, , ]),
colMeans(marg_volm_ebs_ls_poly[n, , ]), colMeans(marg_volm_ebs_ls[n, , ]))
Reps <- length(cover_orc)
sd_marg_covg_volm[n, 1] <- sd( marg_volm_orc[, n]) / sqrt(Reps)
sd_marg_covg_volm[n, 2] <- sd( marg_volm_ibs[, n]) / sqrt(Reps)
sd_marg_covg_volm[n, 3 : 14] <- c(apply(marg_volm_ebs_poly[n, , ], 2, sd),
apply(marg_volm_ebs[n, , ], 2, sd),
apply(marg_volm_ebs_ls_poly[n, , ], 2, sd), apply(marg_volm_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
for( l in 1 : 3)
{
for(m in 1 : 5)
{interv_ratio[n, l, m] <- mean( ratio_ibs_ebs_poly[n, ,l ,m])
interv_ratio[n, 3 + l, m] <- mean( ratio_ibs_ebs[n, ,l ,m])
interv_ratio[n, 6 + l, m] <- mean( ratio_ibs_ebs_ls_poly[n, ,l ,m])
interv_ratio[n, 9 + l, m] <- mean( ratio_ibs_ebs_ls[n, ,l ,m])
#interv_ratio[n, 3 + l, m] <- mean( ratio_ebs_ls_ebs[n, ,l ,m])
Reps <- length(cover_orc)
sd_interv_ratio[n, l, m] <- sd( ratio_ibs_ebs_poly[n, ,l ,m]) / sqrt(Reps)
sd_interv_ratio[n, 3 + l, m] <- sd( ratio_ibs_ebs[n, ,l ,m]) / sqrt(Reps)
sd_interv_ratio[n, 6 + l, m] <- sd( ratio_ibs_ebs_ls_poly[n, ,l ,m]) / sqrt(Reps)
sd_interv_ratio[n, 9 + l, m] <- sd( ratio_ibs_ebs_ls[n, ,l ,m]) / sqrt(Reps)
# sd_interv_ratio[n, 3 + l, m] <- sd( ratio_ebs_ls_ebs[n, ,l ,m]) / sqrt(Reps)
}
}
}
###########################################################
## Figure 4: Coverage and volume for 5 dimensions (independent)
###########################################################
sq_n <- log10(c(5e4, 1e5, 2e5, 5e5, 8e5,  1e6, 5e6))
col_choic <- c("red", "steelblue", "olivedrab", "tomato", "green", "brown", "tomato",
"green", "olivedrab", "tomato", "green", "brown", "tomato", "green")
lin_typ <- c(6, 3, rep(1,3), rep(2,3), rep(3,3), rep(4,3))
names_var <- c("Oracle", "IBS", expression(paste("Pc = 0.1, ", beta[1])),
expression(paste("Pc = 0.1, ", beta[2])), expression(paste("Pc = 0.1, ", beta[3])),
expression(paste("c = 0.1, ", beta[1])),
expression(paste("c = 0.1, ", beta[2])), expression(paste("c = 0.1, ", beta[3])),
expression(paste("PLS c = 0.1, ", beta[1])), expression(paste("PLS c = 0.1, ", beta[2])),
expression(paste("PLS c = 0.1, ", beta[3])),
expression(paste("LS c = 0.1, ", beta[1])), expression(paste("LS c = 0.1, ", beta[2])),
expression(paste("LS c = 0.1, ", beta[3])))
# constant c = 1 is not needed and, beta2 and beta3 are  not needed
index <- c(1, 2, 3, 6, 9, 12)
names_var2 <- c("Oracle", "IBS", "EBS-poly", "EBS", "Lugsail-EBS-poly", "Lugsail-EBS")
pdf("plots/Lmcover_dim5.pdf", height = 5.5, width = 6)
plot(sq_n, cover_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Multivariate Coverage Rate", col = "red", ylim = range(c(cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, cover_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] + sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] - sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 3)
dev.off()
###########################################################
## Figure 4: Coverage and volume for 5 dimensions (independent)
###########################################################
sq_n <- log10(c(5e4, 1e5, 2e5, 5e5, 8e5,  1e6, 5e6))
col_choic <- c("red", "steelblue", "olivedrab", "tomato", "green", "brown", "tomato",
"green", "olivedrab", "tomato", "green", "brown", "tomato", "green")
lin_typ <- c(6, 3, rep(1,3), rep(2,3), rep(3,3), rep(4,3))
names_var <- c("Oracle", "IBS", expression(paste("Pc = 0.1, ", beta[1])),
expression(paste("Pc = 0.1, ", beta[2])), expression(paste("Pc = 0.1, ", beta[3])),
expression(paste("c = 0.1, ", beta[1])),
expression(paste("c = 0.1, ", beta[2])), expression(paste("c = 0.1, ", beta[3])),
expression(paste("PLS c = 0.1, ", beta[1])), expression(paste("PLS c = 0.1, ", beta[2])),
expression(paste("PLS c = 0.1, ", beta[3])),
expression(paste("LS c = 0.1, ", beta[1])), expression(paste("LS c = 0.1, ", beta[2])),
expression(paste("LS c = 0.1, ", beta[3])))
# constant c = 1 is not needed and, beta2 and beta3 are  not needed
index <- c(1, 2, 3, 6, 9, 12)
names_var2 <- c("Oracle", "IBS", "EBS-poly", "EBS", "L-EBS-poly", "L-EBS")
pdf("plots/Lmcover_dim5.pdf", height = 5.5, width = 6)
plot(sq_n, cover_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Multivariate Coverage Rate", col = "red", ylim = range(c(cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, cover_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] + sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] - sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 3)
dev.off()
index <- c(1, 2, 6, 3, 12, 9)
names_var2 <- c("Oracle", "IBS", "EBS", "EBS-poly", "L-EBS", "L-EBS-poly")
pdf("plots/Lmcover_dim5.pdf", height = 5.5, width = 6)
plot(sq_n, cover_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Multivariate Coverage Rate", col = "red", ylim = range(c(cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, cover_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] + sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] - sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 3)
dev.off()
index <- c(1, 2, 6, 3, 12, 9)
names_var2 <- c("Oracle", "IBS", "EBS", "EBS-poly", "L-EBS", "L-EBS-poly")
pdf("plots/Lmcover_dim5.pdf", height = 5.5, width = 6)
plot(sq_n, cover_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Multivariate Coverage Rate", col = "red", ylim = range(c(cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, cover_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] + sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] - sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("best", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 3)
pdf("plots/Lmcover_dim5.pdf", height = 5.5, width = 6)
plot(sq_n, cover_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Multivariate Coverage Rate", col = "red", ylim = range(c(cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, cover_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] + sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] - sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=0.5,
box.lty=0, box.lwd=1, ncol = 3)
dev.off()
pdf("plots/Lmcover_dim5.pdf", height = 5.5, width = 6)
plot(sq_n, cover_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Multivariate Coverage Rate", col = "red", ylim = range(c(cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, cover_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] + sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] - sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 3)
dev.off()
plot(sq_n, cover_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Multivariate Coverage Rate", col = "red", ylim = range(c(cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, cover_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] + sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] - sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 3)
