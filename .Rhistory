##### Calculate Frobenius Norm  #####
frob_all[n, 1] <- 0
frob_all[n, 2] <- mean( forb_ibs[, n])
frob_all[n, 3 : 14] <- c(colMeans(forb_ebs_poly[n, , ]),
colMeans(forb_ebs[n, , ]), colMeans(forb_ebs_ls_poly[n, , ]), colMeans(forb_ebs_ls[n, , ]))
sd_forb[n, 1] <- 0
sd_forb[n, 2] <- sd( forb_ibs[, n]) / sqrt(Reps)
sd_forb[n, 3 : 14] <- c(apply(forb_ebs_poly[n, , ], 2, sd),
apply(forb_ebs[n, , ], 2, sd), apply(forb_ebs_ls_poly[n, , ], 2, sd),
apply(forb_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
##### MARGINAL  SIMULTANEOUS COVERAGE #####
marg_covg[n, 1] <- mean( marg_sim_cov_orc[,n])
marg_covg[n, 2] <- mean( marg_sim_cov_ibs[,n])
marg_covg[n, 3 : 14] <- c(colMeans(marg_sim_cov_ebs_poly[n, , ]),
colMeans(marg_sim_cov_ebs[n, , ]), colMeans(marg_sim_cov_ebs_ls_poly[n, , ]),
colMeans(marg_sim_cov_ebs_ls[n, , ]))
Reps <- length(cover_orc)
sd_marg_covg[n, 1] <- sd( marg_sim_cov_orc[, n]) / sqrt(Reps)
sd_marg_covg[n, 2] <- sd( marg_sim_cov_ibs[, n]) / sqrt(Reps)
sd_marg_covg[n, 3 : 14] <- c(apply(marg_sim_cov_ebs_poly[n, , ], 2, sd),
apply(marg_sim_cov_ebs[n, , ], 2, sd),
apply(marg_sim_cov_ebs_ls_poly[n, , ], 2, sd),
apply(marg_sim_cov_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
##### MEASURE OF VOLUME COMPROMISED DUE TO MARGINALISING SIMULTANEOUS ASSESSMENT #####
marg_covg_volm[n, 1] <- mean( marg_volm_orc[,n])
marg_covg_volm[n, 2] <- mean( marg_volm_ibs[,n])
marg_covg_volm[n, 3 : 14] <- c(colMeans(marg_volm_ebs_poly[n, , ]),
colMeans(marg_volm_ebs[n, , ]),
colMeans(marg_volm_ebs_ls_poly[n, , ]), colMeans(marg_volm_ebs_ls[n, , ]))
Reps <- length(cover_orc)
sd_marg_covg_volm[n, 1] <- sd( marg_volm_orc[, n]) / sqrt(Reps)
sd_marg_covg_volm[n, 2] <- sd( marg_volm_ibs[, n]) / sqrt(Reps)
sd_marg_covg_volm[n, 3 : 14] <- c(apply(marg_volm_ebs_poly[n, , ], 2, sd),
apply(marg_volm_ebs[n, , ], 2, sd),
apply(marg_volm_ebs_ls_poly[n, , ], 2, sd), apply(marg_volm_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
for( l in 1 : 3)
{
for(m in 1 : 5)
{interv_ratio[n, l, m] <- mean( ratio_ibs_ebs_poly[n, ,l ,m])
interv_ratio[n, 3 + l, m] <- mean( ratio_ibs_ebs[n, ,l ,m])
interv_ratio[n, 6 + l, m] <- mean( ratio_ibs_ebs_ls_poly[n, ,l ,m])
interv_ratio[n, 9 + l, m] <- mean( ratio_ibs_ebs_ls[n, ,l ,m])
#interv_ratio[n, 3 + l, m] <- mean( ratio_ebs_ls_ebs[n, ,l ,m])
Reps <- length(cover_orc)
sd_interv_ratio[n, l, m] <- sd( ratio_ibs_ebs_poly[n, ,l ,m]) / sqrt(Reps)
sd_interv_ratio[n, 3 + l, m] <- sd( ratio_ibs_ebs[n, ,l ,m]) / sqrt(Reps)
sd_interv_ratio[n, 6 + l, m] <- sd( ratio_ibs_ebs_ls_poly[n, ,l ,m]) / sqrt(Reps)
sd_interv_ratio[n, 9 + l, m] <- sd( ratio_ibs_ebs_ls[n, ,l ,m]) / sqrt(Reps)
# sd_interv_ratio[n, 3 + l, m] <- sd( ratio_ebs_ls_ebs[n, ,l ,m]) / sqrt(Reps)
}
}
}
###########################################################
## Figure 4: Coverage and volume for 5 dimensions (independent)
###########################################################
sq_n <- log10(c(5e4, 1e5, 2e5, 5e5, 8e5,  1e6, 5e6))
col_choic <- c("red", "steelblue", "brown", "tomato", "green", "brown", "tomato",
"green", "brown", "tomato", "green", "brown", "tomato", "green")
lin_typ <- c(6, 3, rep(1,3), rep(2,3), rep(3,3), rep(4,3))
names_var <- c("Oracle", "IBS", expression(paste("Pc = 0.1, ", beta[1])),
expression(paste("Pc = 0.1, ", beta[2])), expression(paste("Pc = 0.1, ", beta[3])),
expression(paste("c = 0.1, ", beta[1])),
expression(paste("c = 0.1, ", beta[2])), expression(paste("c = 0.1, ", beta[3])),
expression(paste("PLS c = 0.1, ", beta[1])), expression(paste("PLS c = 0.1, ", beta[2])),
expression(paste("PLS c = 0.1, ", beta[3])),
expression(paste("LS c = 0.1, ", beta[1])), expression(paste("LS c = 0.1, ", beta[2])),
expression(paste("LS c = 0.1, ", beta[3])))
# constant c = 1 is not needed and, beta2 and beta3 are  not needed
index <- c(1, 2, 3, 6, 9, 12)
names_var2 <- c("Oracle", "IBS", "EBS-poly", "EBS", "Lugsail-EBS-poly", "Lugsail-EBS")
pdf("plots/Ladmcover_dim20.pdf", height = 5.5, width = 6)
plot(sq_n, cover_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Multivariate Coverage Rate", col = "red", ylim = range(c(-.2, cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, cover_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] + sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] - sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 2)
dev.off()
pdf("plots/Ladfrob_dim20.pdf", height = 5.5, width = 6)
plot(sq_n, frob_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Relative Frobenius Norm", col = "red", ylim = range(c(frob_all[, index], -.2)))
for(k in index)
{
lines(sq_n, frob_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, frob_all[, k], sq_n, frob_all[, k] + sd_forb[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, frob_all[, k], sq_n, frob_all[, k] - sd_forb[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 2)
dev.off()
pdf("plots/Ladsimul_dim20.pdf", height = 5.5, width = 6)
plot(sq_n, marg_covg[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Simultaneous Marginal Coverage Rate", col = "red", ylim = range(c(cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, marg_covg[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, marg_covg[, k], sq_n, marg_covg[, k] + sd_marg_covg[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, marg_covg[, k], sq_n, marg_covg[, k] - sd_marg_covg[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 2)
dev.off()
pdf("plots/Ladrelvol_dim20.pdf", height = 5.5, width = 6)
plot(sq_n, marg_covg_volm[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Volume Ratios to the pth root", col = "red", ylim = range(c(marg_covg_volm[, index], 1.02)))
for(k in index)
{
lines(sq_n, marg_covg_volm[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, marg_covg_volm[, k], sq_n, marg_covg_volm[, k] + sd_marg_covg_volm[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, marg_covg_volm[, k], sq_n, marg_covg_volm[, k] - sd_marg_covg_volm[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 2)
dev.off()
##########################################################
## Figure 7: Coverage and Volume for Dimension 20 (indep)
##########################################################
rm(list = ls())
nparm <- 20
sq_n <- c("5e4","1e5","2e5","5e5","8e5","1e6","5e6")
names_est <- c("Oracle", "IBS", "Pc.1b1", "Pc.1b2", "Pc.1b3", "c.1b1", "c.1b2",
"c.1b3", "PLc.1b1", "PLc.1b2", "PLc.1b3", "Lc.1b1", "Lc.1b2", "Lc.1b3")
dnames <-  list(sq_n, names_est)
cover_all         <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
marg_covg         <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
marg_covg_volm    <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
forb_norm_all     <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
volm_all          <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_volm           <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
frob_all          <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_forb           <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_cover          <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_marg_covg      <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_marg_covg_volm <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_forb_norm      <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
interv_ratio      <- array(dim = c(length(sq_n), 12, nparm), dimnames = list(1 : length(sq_n), 1 : 12, 1 : nparm))
sd_interv_ratio   <-  array(dim = c(length(sq_n), 12, nparm), dimnames = list(1 : length(sq_n), 1 : 12, 1 : nparm))
load("Examples/linear_lad/out/lad_toep_n_5e+06_dim_20.RData")
for(n in 1 : length(sq_n))
{
##### Calculate COVERAGE RATES  #####
cover_all[n, 1] <- mean(cover_orc[,n])
cover_all[n, 2] <- mean(cover_ibs[,n])
cover_all[n, 3 : 14] <- c(colMeans(cover_ebs_poly[n, , ]),
colMeans(cover_ebs[n, , ]), colMeans(cover_ebs_ls_poly[n, , ])
, colMeans(cover_ebs_ls[n, , ]))
Reps <- length(cover_orc)
sd_cover[n, 1] <- sd( cover_orc[, n]) / sqrt(Reps)
sd_cover[n, 2] <- sd( cover_ibs[, n]) / sqrt(Reps)
sd_cover[n, 3 : 14] <- c(apply(cover_ebs_poly[n, , ], 2, sd),
apply(cover_ebs[n, , ], 2, sd),
apply(cover_ebs_ls_poly[n, , ], 2, sd), apply(cover_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
##### Calculate Frobenius Norm  #####
frob_all[n, 1] <- 0
frob_all[n, 2] <- mean( forb_ibs[, n])
frob_all[n, 3 : 14] <- c(colMeans(forb_ebs_poly[n, , ]),
colMeans(forb_ebs[n, , ]), colMeans(forb_ebs_ls_poly[n, , ]), colMeans(forb_ebs_ls[n, , ]))
sd_forb[n, 1] <- 0
sd_forb[n, 2] <- sd( forb_ibs[, n]) / sqrt(Reps)
sd_forb[n, 3 : 14] <- c(apply(forb_ebs_poly[n, , ], 2, sd),
apply(forb_ebs[n, , ], 2, sd), apply(forb_ebs_ls_poly[n, , ], 2, sd),
apply(forb_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
##### MARGINAL  SIMULTANEOUS COVERAGE #####
marg_covg[n, 1] <- mean( marg_sim_cov_orc[,n])
marg_covg[n, 2] <- mean( marg_sim_cov_ibs[,n])
marg_covg[n, 3 : 14] <- c(colMeans(marg_sim_cov_ebs_poly[n, , ]),
colMeans(marg_sim_cov_ebs[n, , ]), colMeans(marg_sim_cov_ebs_ls_poly[n, , ]),
colMeans(marg_sim_cov_ebs_ls[n, , ]))
Reps <- length(cover_orc)
sd_marg_covg[n, 1] <- sd( marg_sim_cov_orc[, n]) / sqrt(Reps)
sd_marg_covg[n, 2] <- sd( marg_sim_cov_ibs[, n]) / sqrt(Reps)
sd_marg_covg[n, 3 : 14] <- c(apply(marg_sim_cov_ebs_poly[n, , ], 2, sd),
apply(marg_sim_cov_ebs[n, , ], 2, sd),
apply(marg_sim_cov_ebs_ls_poly[n, , ], 2, sd),
apply(marg_sim_cov_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
##### MEASURE OF VOLUME COMPROMISED DUE TO MARGINALISING SIMULTANEOUS ASSESSMENT #####
marg_covg_volm[n, 1] <- mean( marg_volm_orc[,n])
marg_covg_volm[n, 2] <- mean( marg_volm_ibs[,n])
marg_covg_volm[n, 3 : 14] <- c(colMeans(marg_volm_ebs_poly[n, , ]),
colMeans(marg_volm_ebs[n, , ]),
colMeans(marg_volm_ebs_ls_poly[n, , ]), colMeans(marg_volm_ebs_ls[n, , ]))
Reps <- length(cover_orc)
sd_marg_covg_volm[n, 1] <- sd( marg_volm_orc[, n]) / sqrt(Reps)
sd_marg_covg_volm[n, 2] <- sd( marg_volm_ibs[, n]) / sqrt(Reps)
sd_marg_covg_volm[n, 3 : 14] <- c(apply(marg_volm_ebs_poly[n, , ], 2, sd),
apply(marg_volm_ebs[n, , ], 2, sd),
apply(marg_volm_ebs_ls_poly[n, , ], 2, sd), apply(marg_volm_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
for( l in 1 : 3)
{
for(m in 1 : 5)
{interv_ratio[n, l, m] <- mean( ratio_ibs_ebs_poly[n, ,l ,m])
interv_ratio[n, 3 + l, m] <- mean( ratio_ibs_ebs[n, ,l ,m])
interv_ratio[n, 6 + l, m] <- mean( ratio_ibs_ebs_ls_poly[n, ,l ,m])
interv_ratio[n, 9 + l, m] <- mean( ratio_ibs_ebs_ls[n, ,l ,m])
#interv_ratio[n, 3 + l, m] <- mean( ratio_ebs_ls_ebs[n, ,l ,m])
Reps <- length(cover_orc)
sd_interv_ratio[n, l, m] <- sd( ratio_ibs_ebs_poly[n, ,l ,m]) / sqrt(Reps)
sd_interv_ratio[n, 3 + l, m] <- sd( ratio_ibs_ebs[n, ,l ,m]) / sqrt(Reps)
sd_interv_ratio[n, 6 + l, m] <- sd( ratio_ibs_ebs_ls_poly[n, ,l ,m]) / sqrt(Reps)
sd_interv_ratio[n, 9 + l, m] <- sd( ratio_ibs_ebs_ls[n, ,l ,m]) / sqrt(Reps)
# sd_interv_ratio[n, 3 + l, m] <- sd( ratio_ebs_ls_ebs[n, ,l ,m]) / sqrt(Reps)
}
}
}
###########################################################
## Figure 4: Coverage and volume for 5 dimensions (independent)
###########################################################
sq_n <- log10(c(5e4, 1e5, 2e5, 5e5, 8e5,  1e6, 5e6))
col_choic <- c("red", "steelblue", "brown", "tomato", "green", "brown", "tomato",
"green", "brown", "tomato", "green", "brown", "tomato", "green")
lin_typ <- c(6, 3, rep(1,3), rep(2,3), rep(3,3), rep(4,3))
names_var <- c("Oracle", "IBS", expression(paste("Pc = 0.1, ", beta[1])),
expression(paste("Pc = 0.1, ", beta[2])), expression(paste("Pc = 0.1, ", beta[3])),
expression(paste("c = 0.1, ", beta[1])),
expression(paste("c = 0.1, ", beta[2])), expression(paste("c = 0.1, ", beta[3])),
expression(paste("PLS c = 0.1, ", beta[1])), expression(paste("PLS c = 0.1, ", beta[2])),
expression(paste("PLS c = 0.1, ", beta[3])),
expression(paste("LS c = 0.1, ", beta[1])), expression(paste("LS c = 0.1, ", beta[2])),
expression(paste("LS c = 0.1, ", beta[3])))
# constant c = 1 is not needed and, beta2 and beta3 are  not needed
index <- c(1, 2, 3, 6, 9, 12)
names_var2 <- c("Oracle", "IBS", "EBS-poly", "EBS", "Lugsail-EBS-poly", "Lugsail-EBS")
pdf("plots/Ladmcover_dim20_toep.pdf", height = 5.5, width = 6)
plot(sq_n, cover_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Multivariate Coverage Rate", col = "red", ylim = range(c(-.2, cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, cover_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] + sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] - sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 2)
dev.off()
pdf("plots/Ladfrob_dim20_toep.pdf", height = 5.5, width = 6)
plot(sq_n, frob_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Relative Frobenius Norm", col = "red", ylim = range(c(frob_all[, index], -.2)))
for(k in index)
{
lines(sq_n, frob_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, frob_all[, k], sq_n, frob_all[, k] + sd_forb[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, frob_all[, k], sq_n, frob_all[, k] - sd_forb[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 2)
dev.off()
pdf("plots/Ladsimul_dim20_toep.pdf", height = 5.5, width = 6)
plot(sq_n, marg_covg[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Simultaneous Marginal Coverage Rate", col = "red", ylim = range(c(cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, marg_covg[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, marg_covg[, k], sq_n, marg_covg[, k] + sd_marg_covg[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, marg_covg[, k], sq_n, marg_covg[, k] - sd_marg_covg[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 2)
dev.off()
pdf("plots/Ladrelvol_dim20_toep.pdf", height = 5.5, width = 6)
plot(sq_n, marg_covg_volm[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Volume Ratios to the pth root", col = "red", ylim = range(c(marg_covg_volm[, index], 1.02)))
for(k in index)
{
lines(sq_n, marg_covg_volm[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, marg_covg_volm[, k], sq_n, marg_covg_volm[, k] + sd_marg_covg_volm[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, marg_covg_volm[, k], sq_n, marg_covg_volm[, k] - sd_marg_covg_volm[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 2)
dev.off()
##########################################################
## Figure 7: Coverage and Volume for Dimension 20 (equiv)
##########################################################
rm(list = ls())
nparm <- 20
sq_n <- c("5e4","1e5","2e5","5e5","8e5","1e6","5e6")
names_est <- c("Oracle", "IBS", "Pc.1b1", "Pc.1b2", "Pc.1b3", "c.1b1", "c.1b2",
"c.1b3", "PLc.1b1", "PLc.1b2", "PLc.1b3", "Lc.1b1", "Lc.1b2", "Lc.1b3")
dnames <-  list(sq_n, names_est)
cover_all         <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
marg_covg         <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
marg_covg_volm    <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
forb_norm_all     <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
volm_all          <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_volm           <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
frob_all          <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_forb           <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_cover          <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_marg_covg      <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_marg_covg_volm <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
sd_forb_norm      <- matrix(nrow = length(sq_n), ncol = 14, dimnames = dnames)
interv_ratio      <- array(dim = c(length(sq_n), 12, nparm), dimnames = list(1 : length(sq_n), 1 : 12, 1 : nparm))
sd_interv_ratio   <-  array(dim = c(length(sq_n), 12, nparm), dimnames = list(1 : length(sq_n), 1 : 12, 1 : nparm))
load("Examples/linear_lad/out/lad_equiv_n_5e+06_dim_20.RData")
for(n in 1 : length(sq_n))
{
##### Calculate COVERAGE RATES  #####
cover_all[n, 1] <- mean(cover_orc[,n])
cover_all[n, 2] <- mean(cover_ibs[,n])
cover_all[n, 3 : 14] <- c(colMeans(cover_ebs_poly[n, , ]),
colMeans(cover_ebs[n, , ]), colMeans(cover_ebs_ls_poly[n, , ])
, colMeans(cover_ebs_ls[n, , ]))
Reps <- length(cover_orc)
sd_cover[n, 1] <- sd( cover_orc[, n]) / sqrt(Reps)
sd_cover[n, 2] <- sd( cover_ibs[, n]) / sqrt(Reps)
sd_cover[n, 3 : 14] <- c(apply(cover_ebs_poly[n, , ], 2, sd),
apply(cover_ebs[n, , ], 2, sd),
apply(cover_ebs_ls_poly[n, , ], 2, sd), apply(cover_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
##### Calculate Frobenius Norm  #####
frob_all[n, 1] <- 0
frob_all[n, 2] <- mean( forb_ibs[, n])
frob_all[n, 3 : 14] <- c(colMeans(forb_ebs_poly[n, , ]),
colMeans(forb_ebs[n, , ]), colMeans(forb_ebs_ls_poly[n, , ]), colMeans(forb_ebs_ls[n, , ]))
sd_forb[n, 1] <- 0
sd_forb[n, 2] <- sd( forb_ibs[, n]) / sqrt(Reps)
sd_forb[n, 3 : 14] <- c(apply(forb_ebs_poly[n, , ], 2, sd),
apply(forb_ebs[n, , ], 2, sd), apply(forb_ebs_ls_poly[n, , ], 2, sd),
apply(forb_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
##### MARGINAL  SIMULTANEOUS COVERAGE #####
marg_covg[n, 1] <- mean( marg_sim_cov_orc[,n])
marg_covg[n, 2] <- mean( marg_sim_cov_ibs[,n])
marg_covg[n, 3 : 14] <- c(colMeans(marg_sim_cov_ebs_poly[n, , ]),
colMeans(marg_sim_cov_ebs[n, , ]), colMeans(marg_sim_cov_ebs_ls_poly[n, , ]),
colMeans(marg_sim_cov_ebs_ls[n, , ]))
Reps <- length(cover_orc)
sd_marg_covg[n, 1] <- sd( marg_sim_cov_orc[, n]) / sqrt(Reps)
sd_marg_covg[n, 2] <- sd( marg_sim_cov_ibs[, n]) / sqrt(Reps)
sd_marg_covg[n, 3 : 14] <- c(apply(marg_sim_cov_ebs_poly[n, , ], 2, sd),
apply(marg_sim_cov_ebs[n, , ], 2, sd),
apply(marg_sim_cov_ebs_ls_poly[n, , ], 2, sd),
apply(marg_sim_cov_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
##### MEASURE OF VOLUME COMPROMISED DUE TO MARGINALISING SIMULTANEOUS ASSESSMENT #####
marg_covg_volm[n, 1] <- mean( marg_volm_orc[,n])
marg_covg_volm[n, 2] <- mean( marg_volm_ibs[,n])
marg_covg_volm[n, 3 : 14] <- c(colMeans(marg_volm_ebs_poly[n, , ]),
colMeans(marg_volm_ebs[n, , ]),
colMeans(marg_volm_ebs_ls_poly[n, , ]), colMeans(marg_volm_ebs_ls[n, , ]))
Reps <- length(cover_orc)
sd_marg_covg_volm[n, 1] <- sd( marg_volm_orc[, n]) / sqrt(Reps)
sd_marg_covg_volm[n, 2] <- sd( marg_volm_ibs[, n]) / sqrt(Reps)
sd_marg_covg_volm[n, 3 : 14] <- c(apply(marg_volm_ebs_poly[n, , ], 2, sd),
apply(marg_volm_ebs[n, , ], 2, sd),
apply(marg_volm_ebs_ls_poly[n, , ], 2, sd), apply(marg_volm_ebs_ls[n, , ], 2, sd)) / sqrt(Reps)
for( l in 1 : 3)
{
for(m in 1 : 5)
{interv_ratio[n, l, m] <- mean( ratio_ibs_ebs_poly[n, ,l ,m])
interv_ratio[n, 3 + l, m] <- mean( ratio_ibs_ebs[n, ,l ,m])
interv_ratio[n, 6 + l, m] <- mean( ratio_ibs_ebs_ls_poly[n, ,l ,m])
interv_ratio[n, 9 + l, m] <- mean( ratio_ibs_ebs_ls[n, ,l ,m])
#interv_ratio[n, 3 + l, m] <- mean( ratio_ebs_ls_ebs[n, ,l ,m])
Reps <- length(cover_orc)
sd_interv_ratio[n, l, m] <- sd( ratio_ibs_ebs_poly[n, ,l ,m]) / sqrt(Reps)
sd_interv_ratio[n, 3 + l, m] <- sd( ratio_ibs_ebs[n, ,l ,m]) / sqrt(Reps)
sd_interv_ratio[n, 6 + l, m] <- sd( ratio_ibs_ebs_ls_poly[n, ,l ,m]) / sqrt(Reps)
sd_interv_ratio[n, 9 + l, m] <- sd( ratio_ibs_ebs_ls[n, ,l ,m]) / sqrt(Reps)
# sd_interv_ratio[n, 3 + l, m] <- sd( ratio_ebs_ls_ebs[n, ,l ,m]) / sqrt(Reps)
}
}
}
###########################################################
## Figure 4: Coverage and volume for 5 dimensions (independent)
###########################################################
sq_n <- log10(c(5e4, 1e5, 2e5, 5e5, 8e5,  1e6, 5e6))
col_choic <- c("red", "steelblue", "brown", "tomato", "green", "brown", "tomato",
"green", "brown", "tomato", "green", "brown", "tomato", "green")
lin_typ <- c(6, 3, rep(1,3), rep(2,3), rep(3,3), rep(4,3))
names_var <- c("Oracle", "IBS", expression(paste("Pc = 0.1, ", beta[1])),
expression(paste("Pc = 0.1, ", beta[2])), expression(paste("Pc = 0.1, ", beta[3])),
expression(paste("c = 0.1, ", beta[1])),
expression(paste("c = 0.1, ", beta[2])), expression(paste("c = 0.1, ", beta[3])),
expression(paste("PLS c = 0.1, ", beta[1])), expression(paste("PLS c = 0.1, ", beta[2])),
expression(paste("PLS c = 0.1, ", beta[3])),
expression(paste("LS c = 0.1, ", beta[1])), expression(paste("LS c = 0.1, ", beta[2])),
expression(paste("LS c = 0.1, ", beta[3])))
# constant c = 1 is not needed and, beta2 and beta3 are  not needed
index <- c(1, 2, 3, 6, 9, 12)
names_var2 <- c("Oracle", "IBS", "EBS-poly", "EBS", "Lugsail-EBS-poly", "Lugsail-EBS")
pdf("plots/Ladmcover_dim20_equiv.pdf", height = 5.5, width = 6)
plot(sq_n, cover_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Multivariate Coverage Rate", col = "red", ylim = range(c(-.2, cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, cover_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] + sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, cover_all[, k], sq_n, cover_all[, k] - sd_cover[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 2)
dev.off()
pdf("plots/Ladfrob_dim20_equiv.pdf", height = 5.5, width = 6)
plot(sq_n, frob_all[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Relative Frobenius Norm", col = "red", ylim = range(c(frob_all[, index], -.2)))
for(k in index)
{
lines(sq_n, frob_all[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, frob_all[, k], sq_n, frob_all[, k] + sd_forb[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, frob_all[, k], sq_n, frob_all[, k] - sd_forb[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 2)
dev.off()
pdf("plots/Ladsimul_dim20_equiv.pdf", height = 5.5, width = 6)
plot(sq_n, marg_covg[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Simultaneous Marginal Coverage Rate", col = "red", ylim = range(c(cover_all[, index], 1)))
for(k in index)
{
lines(sq_n, marg_covg[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, marg_covg[, k], sq_n, marg_covg[, k] + sd_marg_covg[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, marg_covg[, k], sq_n, marg_covg[, k] - sd_marg_covg[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 2)
dev.off()
pdf("plots/Ladrelvol_dim20_equiv.pdf", height = 5.5, width = 6)
plot(sq_n, marg_covg_volm[, 1], type = "n", lwd = 2, lty = 6, xlab = "Log Sample Size", ylab = "Volume Ratios to the pth root", col = "red", ylim = range(c(marg_covg_volm[, index], 1.02)))
for(k in index)
{
lines(sq_n, marg_covg_volm[, k],  lwd = 2, col = col_choic[k], lty = lin_typ[k], type = "b")
arrows(sq_n, marg_covg_volm[, k], sq_n, marg_covg_volm[, k] + sd_marg_covg_volm[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
arrows(sq_n, marg_covg_volm[, k], sq_n, marg_covg_volm[, k] - sd_marg_covg_volm[ ,k], length = 0.05, angle=90, col = col_choic[k], lwd = 2, lty = 1 )
}
legend("bottom", legend = names_var2,
col = col_choic[index], lwd = 2, lty = lin_typ[index], cex=1,
box.lty=0, box.lwd=1, ncol = 2)
dev.off()
gc()
alp = 0.51
cns = 0.1
bet_typ = 1
#
# if(bet_typ == 1){ bet <- (alp + 1)/2}
# if(bet_typ == 2){ bet <- (2*alp + 1)/3}
# if(bet_typ == 3){ bet <- opt_beta_fn(alp, n)}
i = 1;bn <- an <- numeric(7)
for (n in c(5e4, 1e5, 2e5, 5e5, 8e5,  1e6, 5e6)){
bet <- (alp + 1)/2
#polynomial batching
bn[i] <- floor(cns * n^bet)
an[i] <- floor(n/bn)
i = i+1;
}
plot(bn)
plot(an)
#
# if(bet_typ == 1){ bet <- (alp + 1)/2}
# if(bet_typ == 2){ bet <- (2*alp + 1)/3}
# if(bet_typ == 3){ bet <- opt_beta_fn(alp, n)}
i = 1;bn <- an <- numeric(7)
for (n in c(5e4, 1e5, 2e5, 5e5, 8e5,  1e6, 5e6)){
bet <- (alp + 1)/2
#polynomial batching
bn[i] <- floor(cns * n^bet)
an[i] <- floor(n/bn)
i = i+1;
}
plot(bn, type = "l")
plot(an, type = "l")
#
# if(bet_typ == 1){ bet <- (alp + 1)/2}
# if(bet_typ == 2){ bet <- (2*alp + 1)/3}
# if(bet_typ == 3){ bet <- opt_beta_fn(alp, n)}
i = 1;bn <- an <- numeric(7);bet <- (2*alp + 1)/3
for (n in c(5e4, 1e5, 2e5, 5e5, 8e5,  1e6, 5e6)){
#polynomial batching
bn[i] <- floor(cns * n^bet)
an[i] <- floor(n/bn)
i = i+1;
}
plot(bn, type = "l")
plot(an, type = "l")
#
# if(bet_typ == 1){ bet <- (alp + 1)/2}
# if(bet_typ == 2){ bet <- (2*alp + 1)/3}
# if(bet_typ == 3){ bet <- opt_beta_fn(alp, n)}
i = 1;bn <- an <- numeric(7);bet <- (2*alp + 1)/3
for (n in c(5e4, 1e5, 2e5, 5e5, 8e5,  1e6, 5e6)){
#polynomial batching
bn[i] <- floor(cns * n^bet)
an[i] <- floor(n/bn)
i = i+1;
}
plot(bn, type = "l")
plot(an, type = "l")
opt_beta_fn <- function(alpha, m)
{
opt_beta <- optim(.6, fn = b_our, lower = alpha, upper = 1,
n = m, alpha1 = alpha, method = "L-BFGS-B")$par
return(opt_beta)
}
b_our <- function(beta1, n, alpha1)
{
bn <- n^(beta1)
an <- n/bn
return( log(n^(-alpha1/4) + an^(-1/2) + bn^(alpha1-1)
+ bn^(-1/2) * n^(alpha1/2) + an^(-1) + n^(-2*alpha1) * bn) )
}
i = 1;bn <- an <- numeric(7);bet <- opt_beta_fn(alp, n)
for (n in c(5e4, 1e5, 2e5, 5e5, 8e5,  1e6, 5e6)){
#polynomial batching
bn[i] <- floor(cns * n^bet)
an[i] <- floor(n/bn)
i = i+1;
}
plot(bn, type = "l")
plot(an, type = "l")
hline
?hline
