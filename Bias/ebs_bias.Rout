
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###############################################################
> ## bias calculation for EBS and Lugsail-EBS estimator
> # packages for parallel computation
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> ###############################################################
> 
> ## lug = 0 corresponds to EBS
> ## lug = 1 corresponds to EBS with double batch size
> ## al  = alpha in the learning rate
> ## n   = sample size
> ## bn  = batch size
> ## an  = number of batches
> 
> #########################################################
> 
> ebs_bias <- function(n, al, lug = 0, ncore = 1)
+ {
+   # al <- 0.51
+   bn <- floor(0.1*n^((1+al)/2)) ## batch size
+   if(lug == 1) { bn = 2*bn}
+   an <- floor(n/bn)
+   
+ 
+   cl <- makeCluster(ncore) 
+   registerDoParallel(cl)
+   
+   aa <- foreach(j = 1:(an-1), .combine=cbind)%dopar% {
+     
+     abc = 0
+     
+     for (k in (j+1):an) 
+     {
+       for (q in ((k-1)*bn+1):(k*bn)) 
+       {
+         abc = abc + q^(-al)*sum( (1-q^(-al))^( q -
+                     c(((j-1)*bn+1):(j*bn)) ) )
+       }
+     }
+     abc
+   }
+   stopCluster(cl) # stopping the cluster
+   
+   return(-sum(aa)/n) ## the bias
+ }
> 
> # values of alpha
> alpha = c(0.51, 0.75)
> 
> # sample sizes
> sam_siz = c(5e4, 1e5, 2e5, 5e5, 8e5, 1e6)
> 
> # empty bias matrix
> out_ebs <- matrix(NA, nrow = length(sam_siz), ncol = 4)
> 
> # computing bias
> for (j in 1:length(alpha)) 
+ {
+   al = alpha[j]
+   for (i in 1:length(sam_siz)) 
+   { 
+     print(sam_siz[i])     
+     
+     res1 = ebs_bias(sam_siz[i], al = al, lug = 0, ncore = 50) 
+     res2 = ebs_bias(sam_siz[i], al = al, lug = 1, ncore = 50)
+     out_ebs[i,(2*j-1):(2*j)] = c(res1, 2*res2 - res1) 
+   }
+   
+ }
[1] 50000
[1] 1e+05
[1] 2e+05
[1] 5e+05
[1] 8e+05
[1] 1e+06
[1] 50000
[1] 1e+05
[1] 2e+05
[1] 5e+05
[1] 8e+05
[1] 1e+06
> 
> # saving the output
> save(out_ebs, sam_siz, file = "out/ebs_lugsail_bias.RData")
> 
> 
> 
> proc.time()
    user   system  elapsed 
   3.271    0.702 5784.408 
