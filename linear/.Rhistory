0.001597042	,
-0.00374684	,
-0.004243798	,
0.003368777	,
0.001500338	,
-0.004179081	,
-0.003465921	,
0.001513497	,
-0.001072305	,
-0.003376943	,
-0.001405728	,
-0.002690806	,
0.003154831	,
-0.003088051	,
-0.003183044	,
0.001632717	,
-0.003200122	,
-0.002972712	,
0.002059672	,
-0.000350744	,
0.002467885	,
-0.00067774	,
0.002830096	,
-0.000949939	,
-0.001783311	,
-0.002100082	,
-0.002408114	,
-0.002269487	,
0.000589719	,
-0.00127619	,
0.001530603	,
0.00118222	,
0.001090653	,
-0.000664442	,
0.00141615	,
0.001235175	,
-0.001085254	,
0.001045367	,
0.001493791	,
0.00157066	,
0.001371392	,
-0.001556112	,
7.88E-05	,
0.001066263	,
0.000825961	,
-0.000580177	,
0.001291741	,
0.000830698	,
0.000962685	,
0.000368897	,
-0.000149579	,
-0.001095806	,
0.001160704	,
-0.000443117	,
-8.15E-05	,
-0.001119887	,
0.001012063	,
0.000205649	,
0.000746585	,
-0.000907661	,
-0.000884098	,
0.000286118	,
-0.000620792	,
0.000364255	,
0.000872913	,
-0.000863588	,
0.000642762	,
8.80E-08	,
-0.000229871	,
0.000387122	,
-0.000113284	,
-0.000657765	,
-0.000509065	,
-0.000140045	,
0.000649417	,
0.000566409	,
-0.000543543	,
-0.000360945	,
0.00022311	,
0.000629354	,
0.000357869	,
-0.000510893	,
-0.000417635	,
-0.000192796	,
0.000115249	,
-0.000236803	,
0.000121756	,
0.000400947	,
-0.00018059	,
0.000244203	,
-0.000228789	,
-0.000428769	,
-0.000340703	,
-2.87E-05	,
-0.000229756	,
0.000166044	,
-0.000384022	,
0.000153286	,
-2.79E-05	,
-8.76E-05	,
-0.000270173	,
3.66E-05	,
-0.000260754	,
-0.000218273	,
0.0001074	,
-0.000285263	,
-0.000101333	,
0.000225264	,
-8.22E-05	,
-0.000222172	,
0.000101992	,
-0.000134811	,
-0.000153572	,
0.000114334	,
0.000197602	,
-4.42E-05	,
7.03E-06	,
0.000216524	,
-0.000104277	,
-3.02E-05	,
-0.000141753	,
0.000124689	,
-0.000117854	,
3.19E-06	,
-7.93E-05	,
-0.000155177	,
-0.00013316	,
9.23E-05	,
-4.86E-05	,
-6.14E-05	,
0.00013759	,
0.000141285	,
-2.16E-06	,
0.000111566	,
2.43E-05	,
5.85E-05	,
-2.11E-05	,
-9.51E-05	,
-0.000120464	,
4.48E-05
)
hist(x[1:30], xlab = "Amplitude A BAT data", main = "")
lines(density(x[1:30]), col = "green")
rm(list = ls())
x <- c(0.002820494	,
-0.019112354	,
0.021991032	,
-0.02109115	,
0.018132402	,
0.016263028	,
-0.008888613	,
-0.015368119	,
0.010708808	,
0.014072795	,
-0.005210306	,
-0.014711098	,
-0.010720839	,
0.015448949	,
0.007307873	,
-0.012866955	,
-0.009339199	,
-0.007262889	,
-0.008532346	,
-0.000306575	,
-0.008116835	,
-0.012550231	,
-0.011915363	,
-0.008276036	,
-0.008169398	,
-0.007596022	,
-0.000733459	,
-0.000767954	,
-0.008907678	,
-0.008991088	,
-0.005236042	,
0.006754244	,
0.007627861	,
0.008396141	,
-0.004481502	,
-0.002740618	,
0.003323726	,
-0.000428739	,
-0.003234503	,
-0.006267822	,
0.007736468	,
-0.007484635	,
0.006443333	,
0.004791567	,
0.006190868	,
0.00521439	,
0.006379131	,
-0.00225331	,
0.003305634	,
-0.00604811	,
0.003937489	,
0.001341795	,
-0.005731559	,
-0.003776012	,
-0.001488785	,
-0.003510895	,
0.005110587	,
-0.004459258	,
-0.002745681	,
0.004917123	,
0.004519576	,
0.002939142	,
-0.001099991	,
0.00275918	,
-0.004045412	,
-0.00087511	,
0.002105229	,
-0.003740313	,
0.003813662	,
0.001341581	,
-0.003367691	,
-0.002239955	,
-0.001470276	,
0.001376905	,
0.001003186	,
-0.002854015	,
0.000738629	,
-0.000860486	,
-0.002110212	,
0.002924621	,
-0.001695819	,
0.00271664	,
0.000565024	,
0.00271422	,
-0.002150708	,
0.001374199	,
0.000490952	,
0.00109539	,
-0.002517703	,
0.001949286	,
0.00167513	,
0.001830396	,
0.001836905	,
-0.001933591	,
0.001437772	,
0.001527642	,
-0.001511423	,
-0.001461048	,
-0.001085372	,
-0.000850063	,
0.001137901	,
-0.000459282	,
0.001609491	,
-0.001125129	,
0.001277503	,
-0.001342499	,
0.000556202	,
0.001134109	,
0.001050321	,
-0.001312813	,
-0.001256012	,
0.000594465	,
0.000134885	,
-0.001085562	,
-0.001160293	,
-0.000282062	,
0.00032688	,
0.000991947	,
-0.000586349	,
-0.000437271	,
-0.000479977	,
0.000972105	,
-0.000655495	,
-0.000855851	,
8.17E-05	,
-0.000251503	,
-0.000468763	,
-0.000787405	,
-0.000821159	,
0.000723979	,
-0.000766839	,
-0.000408482	,
-0.000572016	,
-0.000668131	,
-0.00023043	,
0.000356816	,
-0.00037025	,
0.000490357	,
-0.000563105	,
0.000150821	,
0.000522919	,
-0.000290836	,
0.000413177	,
0.000512233	,
0.000503956	,
0.000509294	,
-0.000490594	,
-0.000314761	,
0.00043515	,
-0.000401275	,
-0.00039775	,
-1.31E-06	,
0.000256757	,
0.00042835	,
-0.000322324	,
-0.000381926	,
-2.22E-05	,
0.000339289	,
0.000386716	,
0.000349806	,
0.00020518	,
-0.000368699	,
0.000226529	,
-0.000259628	,
-0.000325298	,
-3.38E-05	,
-0.000270048	,
-0.000165764	,
-0.00025901	,
0.000121174	,
0.000238534	,
-0.000225101	,
-0.000190917	,
0.000203268	,
8.85E-05	,
0.000214436	,
-0.000220251	,
-2.99E-05	,
0.000185123	,
-0.00020343	,
0.000132832	,
-0.000153243	,
0.000165188	,
-0.000186548	,
0.000169187	,
8.79E-05	,
0.00011287	,
-0.000141364	,
0.000148883	,
-0.000151794	,
-6.48E-05	,
-6.51E-06	,
-0.000149167	,
9.27E-05	,
0.000128419	,
0.000119798	,
-0.00013105	,
-0.00010973	,
3.92E-05	,
0.000101336
)
hist(x[1:30], xlab = "Amplitude B BAT data", main = "")
lines(density(x[1:30]), col = "green")
hist(rpois(1000, lambda = 10))
hist(rpois(1000, lambda = 20))
hist(rpois(10000, lambda = 20))
hist(rpois(10000, lambda = 100))
install.packages("invgamma", dependencies = T)
library(invgamma)
hist(rinvgamma(1e4, shape = 1))
hist(rinvgamma(1e4, shape = 0))
hist(rinvgamma(1e4, shape = 0.1, scale = 1))
hist(rinvgamma(1e2, shape = 0.1, scale = 1))
hist(rinvgamma(1e2, shape = 0.1, scale = .1))
hist(rinvgamma(1e2, shape = 0.1, scale = 10))
hist(rinvgamma(1e2, shape = 0, scale = 10))
hist(rinvgamma(1e2, shape = 1, scale = 10))
hist(rinvgamma(1e5, shape = 1, scale = 10))
hist(rinvgamma(1e2, shape = 2, scale = 10))
hist(rinvgamma(1e2, shape = 2, scale = 1))
hist(rinvgamma(1e2, shape = 20, scale = 1))
hist(rinvgamma(1e2, shape = 20, scale = 100))
hist(rinvgamma(1e2, shape = 20, scale = 1))
hist(rinvgamma(1e2, shape = 0.0, scale = 1))
hist(rinvgamma(1e2, shape = .20, scale = 1))
hist(rinvgamma(1e5, shape = .20, scale = 1))
hist(rinvgamma(1e3, shape = 1, scale = 10))
hist(rinvgamma(1e3, shape = 1, scale = 1))
hist(rinvgamma(1e3, shape = .1, scale = 1))
hist(rinvgamma(1e3, shape = 100, scale = 1))
hist(rinvgamma(1e3, shape = 100, scale = 0.01))
1821+63+11
sqrt(3)
sqrt(3)/2
c(1,2,3)<0
c(1,-2,3)<0
setwd("C:/Users/Hp/Documents/GitHub/Batch_Means_Online/linear")
#Gradient Function for Linear Model
grad_lin <- function(sg,y,x)
{
(x %*% (sg) - y) %*% x
}
#Combining function to get outputs from  parallelization
comb <- function(x, ...)
{
lapply(seq_along(x),
function(i) c(x[[i]], lapply(list(...), function(y) y[[i]])))
}
source("Visualization_paper_code/sim_functions.R")
rm(list=ls())
set.seed(1)
library(MASS)
library(doParallel)
library(foreach)
library(mcmcse)
library(mvtnorm)
source("grad_lin_and_batch.R")
source("./../ebs_batch_mean.R")
source("./../ibs_jasa_mean.R")
source("./../sqrt_mat.R")
max_sam <- 1e5
nparm <- 5
#Gradient Function for Linear Model
grad_lin <- function(sg,y,x)
{
(x %*% (sg) - y) %*% x
}
#Combining function to get outputs from  parallelization
comb <- function(x, ...)
{
lapply(seq_along(x),
function(i) c(x[[i]], lapply(list(...), function(y) y[[i]])))
}
source("Visualization_paper_code/sim_functions.R")
max_sam = 1e5
A = diag(nparm)
cns = c(0.1, 1)
eta_cns = 0.5
sam_siz = c(5e4,1e5,2e5,5e5,8e5,1e6,5e6,1e7)
qlev = 0.95
alp = .51
burn_in = 1000
nam_matrix = "indep"
cns1 = 1
# Sigma Matrix for Linear Model
sigm <- qr.solve(A)
sam_siz <- sam_siz[sam_siz <= max_sam]
#Largest sample size
n <- sam_siz[length(sam_siz)]
#Parameter space
parm <- seq(1 / nparm, 1, length.out = nparm)
#Chi-Square critical value
crt_val <- qchisq(qlev, df = nparm)
sg <- matrix(nrow = n + burn_in, ncol = nparm);
sg_ct <- matrix(nrow = n, ncol = nparm) #sgd iterates after dropping burn-in samples
# Following matrix will be used in generating regressors X
sqrt_sig <- sqrt_mat(A)
# Declaring variable names
cns_ln <- 3*length(cns)# 3 multiplied due to three types of beta under study
forb_ibs <- volm_ibs <- cover_ibs <- forb_ibs_norm <- matrix(rep(0, length(sam_siz)*Rep), nrow = Rep, ncol = length(sam_siz), dimnames = list( 1 : Rep, sam_siz))
cover_orc <- matrix(rep(0, length(sam_siz)*Rep), nrow = Rep, ncol = length(sam_siz), dimnames = list( 1 : Rep, sam_siz))
volm_ebs <- forb_ebs <- forb_ebs_norm <- array(rep(0, cns_ln * Rep * length(sam_siz)), dim = c(length(sam_siz), Rep, cns_ln), dimnames = list(sam_siz, 1 : Rep, 1 : cns_ln))
cover_ebs <- array(rep(0, cns_ln * Rep * length(sam_siz)), dim = c(length(sam_siz), Rep, cns_ln), dimnames = list(sam_siz, 1 : Rep, 1 : cns_ln))
volm_ebs_ls <- array(rep(0, cns_ln * Rep * length(sam_siz)), dim = c(length(sam_siz), Rep, cns_ln), dimnames = list(sam_siz, 1 : Rep, 1 : cns_ln))
Rep <- 1
cn <- 1
smpl <- 1
# Declaring variable names
cns_ln <- 3*length(cns)# 3 multiplied due to three types of beta under study
forb_ibs <- volm_ibs <- cover_ibs <- forb_ibs_norm <- matrix(rep(0, length(sam_siz)*Rep), nrow = Rep, ncol = length(sam_siz), dimnames = list( 1 : Rep, sam_siz))
cover_orc <- matrix(rep(0, length(sam_siz)*Rep), nrow = Rep, ncol = length(sam_siz), dimnames = list( 1 : Rep, sam_siz))
volm_ebs <- forb_ebs <- forb_ebs_norm <- array(rep(0, cns_ln * Rep * length(sam_siz)), dim = c(length(sam_siz), Rep, cns_ln), dimnames = list(sam_siz, 1 : Rep, 1 : cns_ln))
cover_ebs <- array(rep(0, cns_ln * Rep * length(sam_siz)), dim = c(length(sam_siz), Rep, cns_ln), dimnames = list(sam_siz, 1 : Rep, 1 : cns_ln))
volm_ebs_ls <- array(rep(0, cns_ln * Rep * length(sam_siz)), dim = c(length(sam_siz), Rep, cns_ln), dimnames = list(sam_siz, 1 : Rep, 1 : cns_ln))
forb_ebs_norm_ls <- cover_ebs_ls  <- forb_ebs_ls <- array(rep(0, cns_ln * Rep * length(sam_siz)), dim = c(length(sam_siz), Rep, cns_ln), dimnames = list(sam_siz, 1 : Rep, 1 : cns_ln))
ratio_ibs_ebs <- ratio_ibs_ebs_ls <- ratio_ebs_ls_ebs <- array(rep(0, nparm * cns_ln * Rep * length(sam_siz)), dim = c(length(sam_siz), Rep, cns_ln, nparm), dimnames = list(sam_siz, 1 : Rep, 1 : cns_ln, 1 : nparm))
marg_sim_cov_orc <- marg_sim_cov_ibs <- matrix(rep(0, length(sam_siz)*Rep), nrow = Rep, ncol = length(sam_siz), dimnames = list( 1 : Rep, sam_siz))
marg_sim_cov_ebs <- marg_sim_cov_ebs_ls <- array(rep(0, cns_ln * Rep * length(sam_siz)), dim = c(length(sam_siz), Rep, cns_ln), dimnames = list(sam_siz, 1 : Rep, 1 : cns_ln))
x <- matrix(rnorm((n + burn_in) * nparm), nrow = (n + burn_in), ncol = nparm)
x <- x %*% sqrt_sig
#noisy Observed Data
y <- x %*% parm + rnorm((n + burn_in), mean = 0, sd = 1)
#Learning Rate
eta <- numeric(n + burn_in)
sg[1, ] <- rep(0, nparm)
for(i in 2 : (n + burn_in))
{
eta[i] <- i^( - alp)
sg[i, ] <- sg[i - 1, ] - eta_cns * eta[i] * grad_lin(sg[i - 1, ], y[i], x[i, ])
}
sg_ct_full <- sg[(burn_in + 1) : (n + burn_in), ]
sg_ct <- sg_ct_full[1 : sam_siz[smpl], ]
asg <- colMeans(sg_ct) #Averaged SGD
asg
#Oracle coverage
cover_orc[cn, smpl] <- as.numeric(sam_siz[smpl]  * t(asg - parm) %*% solve(sigm) %*% (asg - parm) <= crt_val)
tmp_orc <- new.sim.int(sigm, conf = 0.95, center = parm)$ints
tmp_orc[, 1] <= parm
tmp_orc[, 2] >= parm
tmp_orc[, 1] <= parm &  tmp_orc[, 2] >= parm
tmp_orc[, 1] <= parm &&  tmp_orc[, 2] >= parm
c(T,F,T) & c(F, F, F)
c(T,F,T) & c(T, F, F)
sum(tmp_orc[, 1] <= parm &  tmp_orc[, 2] >= parm) == length(nparm)
tmp_orc
tmp_orc[, 1] <= parm
tmp_orc[, 2] >= parm
tmp_orc[, 1] <= parm &  tmp_orc[, 2] >= parm
sum(tmp_orc[, 1] <= parm &  tmp_orc[, 2] >= parm)
as.numeric(sum(tmp_orc[, 1] <= parm &  tmp_orc[, 2] >= parm) == nparm)
ibs_mean     <- ibs_jasa_mean(sg_ct, alp, cns = cns1)
forb_ibs[cn, smpl]  <-  norm(ibs_mean - sigm, "F")/ norm(sigm, "F")
forb_ibs_norm[cn, smpl] <- norm(ibs_mean, "F")
volm_ibs[cn, smpl]  <- (det(ibs_mean)) ^ (1 / nparm)
cover_ibs[cn, smpl] <- as.numeric(sam_siz[smpl]  * t(asg - parm) %*% qr.solve(ibs_mean) %*% (asg - parm) <= crt_val)
#Marginal Simultaneous for IBS
tmp_ibs <- new.sim.int(ibs_mean, conf = 0.95, center = parm)$ints
leng_ibs <- tmp_ibs[, 2] - tmp_ibs[, 1]
marg_sim_cov_ibs[cn, smpl] <- as.numeric(sum(tmp_ibs[, 1] <= parm &  tmp_ibs[, 2] >= parm) == nparm)
marg_sim_cov_ibs
load("~/GitHub/Batch_Means_Online/linear/out_test/linear_indep_n_5e+06_dim_5.RData")
marg_sim_cov_orc
marg_sim_cov_ibs
marg_sim_cov_ebs
marg_sim_cov_ebs_ls
load("~/GitHub/Batch_Means_Online/linear/out_test/linear_toep_n_5e+06_dim_5.RData")
colMeans(marg_sim_cov_orc)
colMeans(marg_sim_cov_ibs)
