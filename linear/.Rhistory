forb_ibs[cn]  <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs_norm[cn] <- sqrt(sum((ibs_mean)^2))
volm_ibs[cn]  <- (det(ibs_mean))^(1/nparm)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%qr.solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
count=1
#Nine different settings of EBS, c=0.1,1,2
for( mk in 1:length(cns)){
for(bk in 1:3){
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk)
forb_ebs_norm[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
count=count+1
}
}
}
print(difftime(Sys.time(),st,units="secs"))
rm(list=ls())
library(MASS)
library(matrixcalc)
source("grad_lin.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
st <- Sys.time()
Rep <- 1
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e7+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .51
nparm <- 20
parm <- rep(5,nparm)
crt_val <- qchisq(qlev,df=nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ibs <- volm_ibs <- cover_ibs <- forb_ibs_norm <- numeric(Rep)
cover_orc<- numeric(Rep)
volm_ebs <- forb_ebs <- forb_ebs_norm <- matrix(rep(0,9*Rep),nrow = Rep,ncol = 9)
cover_ebs  <- matrix(rep(0,9*Rep),nrow = Rep,ncol = 9)
cns = c(0.1,1,2)
#1000  Replications to obtain stable results
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
#noisy Observed Data
y <- x %*% parm + rnorm(n, mean = 0,sd = 1)
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - .5 * eta[i] * grad_lin(sg[i-1,],y[i],x[i,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#IBS and Oracle related coverages and volume
ibs_mean     <- ibs_jasa_mean(sg_ct,alp)
forb_ibs[cn]  <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs_norm[cn] <- sqrt(sum((ibs_mean)^2))
volm_ibs[cn]  <- (det(ibs_mean))^(1/nparm)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%qr.solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
count=1
#Nine different settings of EBS, c=0.1,1,2
for( mk in 1:length(cns)){
for(bk in 1:3){
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk)
forb_ebs_norm[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
count=count+1
}
}
}
print(difftime(Sys.time(),st,units="secs"))
gc()
rm(list=ls())
library(MASS)
library(matrixcalc)
source("grad_lin.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
st <- Sys.time()
Rep <- 1
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e6+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .51
nparm <- 20
parm <- rep(5,nparm)
crt_val <- qchisq(qlev,df=nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ibs <- volm_ibs <- cover_ibs <- forb_ibs_norm <- numeric(Rep)
cover_orc<- numeric(Rep)
volm_ebs <- forb_ebs <- forb_ebs_norm <- matrix(rep(0,9*Rep),nrow = Rep,ncol = 9)
cover_ebs  <- matrix(rep(0,9*Rep),nrow = Rep,ncol = 9)
cns = c(0.1,1,2)
#1000  Replications to obtain stable results
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
#noisy Observed Data
y <- x %*% parm + rnorm(n, mean = 0,sd = 1)
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - .5 * eta[i] * grad_lin(sg[i-1,],y[i],x[i,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#IBS and Oracle related coverages and volume
ibs_mean     <- ibs_jasa_mean(sg_ct,alp)
forb_ibs[cn]  <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs_norm[cn] <- sqrt(sum((ibs_mean)^2))
volm_ibs[cn]  <- (det(ibs_mean))^(1/nparm)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%qr.solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
count=1
#Nine different settings of EBS, c=0.1,1,2
for( mk in 1:length(cns)){
for(bk in 1:3){
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk)
forb_ebs_norm[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
count=count+1
}
}
}
print(difftime(Sys.time(),st,units="secs"))
rm(list=ls())
library(MASS)
library(matrixcalc)
source("grad_lin.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
st <- Sys.time()
Rep <- 1
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e6+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .51
nparm <- 5
parm <- rep(5,nparm)
crt_val <- qchisq(qlev,df=nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ibs <- volm_ibs <- cover_ibs <- forb_ibs_norm <- numeric(Rep)
cover_orc<- numeric(Rep)
volm_ebs <- forb_ebs <- forb_ebs_norm <- matrix(rep(0,9*Rep),nrow = Rep,ncol = 9)
cover_ebs  <- matrix(rep(0,9*Rep),nrow = Rep,ncol = 9)
cns = c(0.1,1,2)
#1000  Replications to obtain stable results
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
#noisy Observed Data
y <- x %*% parm + rnorm(n, mean = 0,sd = 1)
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - .5 * eta[i] * grad_lin(sg[i-1,],y[i],x[i,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#IBS and Oracle related coverages and volume
ibs_mean     <- ibs_jasa_mean(sg_ct,alp)
forb_ibs[cn]  <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs_norm[cn] <- sqrt(sum((ibs_mean)^2))
volm_ibs[cn]  <- (det(ibs_mean))^(1/nparm)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%qr.solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
count=1
#Nine different settings of EBS, c=0.1,1,2
for( mk in 1:length(cns)){
for(bk in 1:3){
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk)
forb_ebs_norm[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
count=count+1
}
}
}
print(difftime(Sys.time(),st,units="secs"))
rm(list=ls())
library(MASS)
library(matrixcalc)
source("grad_lin.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
st <- Sys.time()
Rep <- 1
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 5e6+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .51
nparm <- 5
parm <- rep(5,nparm)
crt_val <- qchisq(qlev,df=nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ibs <- volm_ibs <- cover_ibs <- forb_ibs_norm <- numeric(Rep)
cover_orc<- numeric(Rep)
volm_ebs <- forb_ebs <- forb_ebs_norm <- matrix(rep(0,9*Rep),nrow = Rep,ncol = 9)
cover_ebs  <- matrix(rep(0,9*Rep),nrow = Rep,ncol = 9)
cns = c(0.1,1,2)
#1000  Replications to obtain stable results
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
#noisy Observed Data
y <- x %*% parm + rnorm(n, mean = 0,sd = 1)
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - .5 * eta[i] * grad_lin(sg[i-1,],y[i],x[i,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#IBS and Oracle related coverages and volume
ibs_mean     <- ibs_jasa_mean(sg_ct,alp)
forb_ibs[cn]  <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs_norm[cn] <- sqrt(sum((ibs_mean)^2))
volm_ibs[cn]  <- (det(ibs_mean))^(1/nparm)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%qr.solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
count=1
#Nine different settings of EBS, c=0.1,1,2
for( mk in 1:length(cns)){
for(bk in 1:3){
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk)
forb_ebs_norm[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
count=count+1
}
}
}
print(difftime(Sys.time(),st,units="secs"))
24*1000/3600
rm(list=ls())
setwd("C:/Users/Hp/Documents/GitHub/Batch_Means_Online/check_value_constant")
source("ibs_lng.R")
source("ebs_lng.R")
alp <- .51
cns_sq <- c(0.01,0.1,1,2,5)
sq_n <- seq(1e4,1e6,by=5e3)
leng_ebs <- matrix(nrow=5,ncol=length(sq_n))
leng_ibs <- matrix(nrow=5,ncol=length(sq_n))
sq_n <- seq(1e3,1e6,by=5e3)
leng_ebs <- matrix(nrow=5,ncol=length(sq_n))
leng_ibs <- matrix(nrow=5,ncol=length(sq_n))
for( k in 1:length(sq_n)){
n <- sq_n[k]
for (m in 1 : length(cns_sq)){
leng_ebs[m,k] <- ebs_lng(n,cns=cns_sq[m],alp,bet_typ=3)
leng_ibs[m,k] <- ibs_lng(n,cns=cns_sq[m],alp)
}
}
sampl_size_log10 <- log10(sq_n)
pdf("zero_pt_01_beta_3.pdf")
plot(sampl_size_log10,leng_ebs[1,],type="l",ylim=c(2,9000),xlab="Sample Size ",ylab="Number of batches")
lines(sampl_size_log10,leng_ibs[1,],col="green")
legend( x="topleft",legend=c("EBS", "IBS"),
col=c("black", "green"), lty=c(1,1), cex=0.8)
dev.off()
pdf("zero_pt_1_beta_3.pdf")
plot(sampl_size_log10,leng_ebs[2,],type="l",ylim=c(20,950),xlab="Sample Size ",ylab="Number of batches")
lines(sampl_size_log10,leng_ibs[2,],col="green")
legend( x="topleft",legend=c("EBS", "IBS"),
col=c("black", "green"), lty=c(1,1), cex=0.8)
dev.off()
pdf("zero_1_beta_3.pdf")
plot(sampl_size_log10,leng_ebs[3,],type="l",ylim=c(2,100),xlab="Sample Size ",ylab="Number of batches")
lines(sampl_size_log10,leng_ibs[3,],col="green")
legend( x="topleft",legend=c("EBS", "IBS"),
col=c("black", "green"), lty=c(1,1), cex=0.8)
dev.off()
pdf("zero_2_beta_3.pdf")
plot(sampl_size_log10,leng_ebs[4,],type="l",ylim=c(2,50),xlab="Sample Size ",ylab="Number of batches")
lines(sampl_size_log10,leng_ibs[4,],col="green")
legend( x="topleft",legend=c("EBS", "IBS"),
col=c("black", "green"), lty=c(1,1), cex=0.8)
dev.off()
pdf("zero_5_beta_3.pdf")
plot(sampl_size_log10,leng_ebs[5,],type="l",ylim=c(1,20),xlab="Sample Size ",ylab="Number of batches")
lines(sampl_size_log10,leng_ibs[5,],col="green")
legend( x="topleft",legend=c("EBS", "IBS"),
col=c("black", "green"), lty=c(1,1), cex=0.8)
dev.off()
rm(list=ls())
library(MASS)
library(matrixcalc)
source("grad_lin.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 10
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e5+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .51
nparm <- 5
parm <- rep(5,nparm)
crt_val <- qchisq(qlev,df=nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ibs <- volm_ibs <- cover_ibs <- forb_ibs_norm <- numeric(Rep)
cover_orc<- numeric(Rep)
volm_ebs <- forb_ebs <- forb_ebs_norm <- matrix(rep(0,9*Rep),nrow = Rep,ncol = 9)
cover_ebs  <- matrix(rep(0,9*Rep),nrow = Rep,ncol = 9)
cns = c(0.1,1,2)
#1000  Replications to obtain stable results
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
#noisy Observed Data
y <- x %*% parm + rnorm(n, mean = 0,sd = 1)
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - .5 * eta[i] * grad_lin(sg[i-1,],y[i],x[i,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#IBS and Oracle related coverages and volume
ibs_mean     <- ibs_jasa_mean(sg_ct,alp)
forb_ibs[cn]  <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs_norm[cn] <- sqrt(sum((ibs_mean)^2))
volm_ibs[cn]  <- (det(ibs_mean))^(1/nparm)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%qr.solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
count=1
#Nine different settings of EBS, c=0.1,1,2
for( mk in 1:length(cns)){
for(bk in 1:3){
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk)
forb_ebs_norm[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
count=count+1
}
}
}
save(forb_ibs,forb_ebs,file="forb_details_1e5_lin.RData")
save(volm_ibs,volm_ebs,file="volm_details_1e5_lin.RData")
save(cover_orc,cover_ibs,cover_ebs,file="cover_details_1e5_lin.RData")
save(forb_ibs_norm,forb_ebs_norm,file="forb_norm_details_1e5_lin.RData")
getqd()
getwd()
setwd("C:/Users/Hp/Documents/GitHub/Batch_Means_Online/linear")
rm(list=ls())
library(MASS)
library(matrixcalc)
source("grad_lin.R")
source("ebs_batch_mean.R")
source("ibs_jasa_mean.R")
source("sqrt_mat.R")
Rep <- 10
cutf <- 1000 #Dropping initial Iterates of SGD
#Sample Size
n <- 1e5+cutf;
#Confidence level
qlev <- 0.95
#Iterations
alp <- .51
nparm <- 5
parm <- rep(5,nparm)
crt_val <- qchisq(qlev,df=nparm)
am <- numeric(1000)
Iter <- n;
sg <- matrix(nrow = Iter, ncol = nparm);
sg_ct <- matrix(nrow = Iter - cutf, ncol = nparm)
#Iterates stored
# Sigma Matrix Stored with Square root
sigm <- 1*diag(nparm)
sqrt_sig <- sqrt_mat(sigm)
forb_ibs <- volm_ibs <- cover_ibs <- forb_ibs_norm <- numeric(Rep)
cover_orc<- numeric(Rep)
volm_ebs <- forb_ebs <- forb_ebs_norm <- matrix(rep(0,9*Rep),nrow = Rep,ncol = 9)
cover_ebs  <- matrix(rep(0,9*Rep),nrow = Rep,ncol = 9)
cns = c(0.1,1,2)
#1000  Replications to obtain stable results
for(cn in 1 : Rep){
if(cn>=2){n <- n+cutf}
#Data Generated
x <- matrix(rnorm(n*nparm),nrow=n,ncol=nparm)
x <- x%*%sqrt_sig
#noisy Observed Data
y <- x %*% parm + rnorm(n, mean = 0,sd = 1)
#Learning Rate
eta <- numeric(Iter)
sg[1,] <- rep(0, nparm)
for(i in 2 : Iter){
eta[i] <- i^(-alp)
sg[i,] <- sg[i-1,] - .5 * eta[i] * grad_lin(sg[i-1,],y[i],x[i,])
}
sg_ct <- sg[(cutf+1):Iter,]
asg <- colMeans(  sg_ct)
n <- n - cutf
#IBS and Oracle related coverages and volume
ibs_mean     <- ibs_jasa_mean(sg_ct,alp)
forb_ibs[cn]  <- sqrt(sum((ibs_mean-sigm)^2))/sqrt(sum(sigm^2))
forb_ibs_norm[cn] <- sqrt(sum((ibs_mean)^2))
volm_ibs[cn]  <- (det(ibs_mean))^(1/nparm)
cover_ibs[cn] <- as.numeric(n*t(asg-parm)%*%qr.solve(ibs_mean)%*%(asg-parm)<=crt_val)
cover_orc[cn] <- as.numeric(n*t(asg-parm)%*%solve(sigm)%*%(asg-parm)<=crt_val)
count=1
#Nine different settings of EBS, c=0.1,1,2
for( mk in 1:length(cns)){
for(bk in 1:3){
ebs_mean            <- ebs_batch_mean(sg_ct,alp,cns[mk],bk)
forb_ebs_norm[cn,count] <- sqrt(sum((ebs_mean)^2))
forb_ebs[cn,count]  <- sqrt(sum((ebs_mean-sigm)^2))/sqrt(sum(sigm^2))
volm_ebs[cn,count]  <- (det(ebs_mean))^(1/nparm)
cover_ebs[cn,count] <- as.numeric(n*t(asg-parm)%*%qr.solve(ebs_mean)%*%(asg-parm)<=crt_val)
count=count+1
}
}
}
save(forb_ibs,forb_ebs,file="forb_details_1e5_lin.RData")
save(volm_ibs,volm_ebs,file="volm_details_1e5_lin.RData")
save(cover_orc,cover_ibs,cover_ebs,file="cover_details_1e5_lin.RData")
save(forb_ibs_norm,forb_ebs_norm,file="forb_norm_details_1e5_lin.RData")
forb_ibs
forb_ibs_norm
forb_ebs_norm
mean(forb_ibs_norm)
colMean(forb_ebs_norm)
colMeans(forb_ebs_norm)
colMeans(volm_ebs)
mean(volm_ibs)
