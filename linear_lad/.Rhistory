#hess[i,j] =
}
}
}
for(i in 1 : 2*K){
print(round(i/2))
for(j in 1 : 2*K){
#hess[i,j] =
}
}
for(i in 1 : 2*K){
print(i)
print(round(i/2))
for(j in 1 : 2*K){
#hess[i,j] =
}
}
for(i in 1 : (2*K)){
print(i)
print(round(i/2))
for(j in 1 : 2*K){
#hess[i,j] =
}
}
(i %% 2)
i
for(i in 1 : (2*K)){
print(i)
print(round(i/2) + (i %% 2))
for(j in 1 : 2*K){
#hess[i,j] =
}
}
for( i in 1 : K){indx[c(cont, cont + 1)] <- rep(i, 2)
cont = cont + 1
}
indx <- vector()
for( i in 1 : K){indx[c(cont, cont + 1)] <- rep(i, 2)
cont = cont + 1
}
indx <- vector(); cont = 1
for( i in 1 : K){indx[c(cont, cont + 1)] <- rep(i, 2)
cont = cont + 1
}
indx
K
indx <- vector(); cont = 1
for( i in 1 : K){indx[cont : cont + 1] <- rep(i, 2)
cont = cont + 1
}
rep(i, 2)
indx[cont : cont + 1]
indx <- vector(); cont = 1
for( i in 1 : K){indx[cont : (cont + 1)] <- rep(i, 2)
cont = cont + 1
}
indx
indx <- vector(); cont = 1
for( i in 1 : K){indx[cont : (cont + 1)] <- rep(i, 2)
cont = cont + 2
}
indx
indx[3]
indx[5]
indx[6]
indx[7]
indx[8]
for(i in 1 : (2*K)){
for(j in 1 : 2*K){
print(c(indx[i], indx[j])
#hess[i,j] =
}
}
}
K <- 5
for(i in 1 : (2*K)){
for(j in 1 : 2*K){
print(c(indx[i], indx[j]))
#hess[i,j] =
}
}
for(i in 1 : (2*K)){
for(j in 1 : (2*K)){
print(c(indx[i], indx[j]))
#hess[i,j] =
}
}
Sys.which("make")
Sys.which("make")
setwd("~/")
Sys.which("make")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
library(ggplot2)
(abd = data.frame(a = runif(100, 0, 3),
b = runif(100, 346, 455),
d = runif(100, 3952, 4903)) %>%
ggplot() +
geom_qq(aes(sample = a, color = "a")) +
geom_qq(aes(sample = b, color = "b")) +
geom_qq(aes(sample = d, color = "d")) +
theme_minimal())
library(dplyr)
(abd = data.frame(a = runif(100, 0, 3),
b = runif(100, 346, 455),
d = runif(100, 3952, 4903)) %>%
ggplot() +
geom_qq(aes(sample = a, color = "a")) +
geom_qq(aes(sample = b, color = "b")) +
geom_qq(aes(sample = d, color = "d")) +
theme_minimal())
set.seed(666)
df <- data.frame(X = rnorm(20), Y = rnorm(20), Z = rnorm(20))
# Create plot using ggplot2
library(ggplot2)
gg <- ggplot(df) +
geom_point(data = df, aes(x = X, y = Y), colour = "red") +
geom_point(data = df, aes(x = X, y = Z), colour = "black") +
theme_bw()
print(gg)
?qqnorm()
set.seed(1220)
nparm = 5
cns = c(0.1), eta_cns = 0.5, sam_siz = 1e5, alp = .51,
burn_in = 5000, cns1 = 0.1, Ite
cns = c(0.1)
eta_cns = 0.5
sam_siz = 1e5
alp = .51
burn_in = 5000
cns1 = 0.1
Iter = 50
nsampl = 1000
##########################################################
## The file shows QQ plot for different estimators
##########################################################
## Function to calculate the SQRT of a matrix using SVD
sqrt_mat <- function(sigm)
{
decomp_sigm <- svd(sigm)
dig_sig <- decomp_sigm$d
v_mat <- decomp_sigm$u
sqrt_sig <- v_mat %*% diag((dig_sig)^(1/2)) %*% t(v_mat)
return(sqrt_sig)
}
# Gradient Function for Linear Model
grad_lin <- function(sg,y,x)
{
(x %*% (sg) - y) %*% x
}
##############################################
## File contains the function to calculate
## the EBS estimator (with or without lugsail)
##############################################
## Obtains value of bound on MSE of EBS
b_our <- function(beta1, n, alpha1)
{
bn <- n^(beta1)
an <- n/bn
return( log(n^(-alpha1/4) + an^(-1/2) + bn^(alpha1-1) + bn^(-1/2) * n^(alpha1/2) + an^(-1) + n^(-2*alpha1) * bn) )
}
## Optimal value of beta for alpha and sample size
opt_beta_fn <- function(alpha, m)
{
opt_beta <- optim(.6, fn = b_our, lower = alpha, upper = 1, n = m, alpha1 = alpha, method = "L-BFGS-B")$par
return(opt_beta)
}
## EBS estimator function
ebs_batch <- function(sgd, alp = 0.51, cns = 0.1, bet_typ = 1, lug = 1)
{
n <- nrow(sgd)  # Number of SGD iterates
nparm <- ncol(sgd)
tot_mean <- colMeans(sgd)
# Appropriate options for beta
if(bet_typ == 1){ bet <- (alp + 1)/2}
if(bet_typ == 2){ bet <- (2*alp + 1)/3}
if(bet_typ == 3){ bet <- opt_beta_fn(alp, n)}
#Smart batching
two_seq <- 2^(seq(10:40))
bn <- min(two_seq[two_seq >= cns * n^bet]) 	# Equal Batch Size Configuration
an <- floor(n/bn) 	# No. of batches
ebs <- t(sapply(1 : an, function(i) colMeans( matrix(sgd[(bn*(i - 1) + 1) : (bn*i), ], ncol = nparm ))))
ebs <- sqrt(bn) * scale(ebs, center = colMeans(sgd), scale = FALSE)
return(ebs)
}
##############################################
## Function to calculate the IBS estimator
##############################################
ibs_jasa <- function(sgd, alp = 0.51, cns = 1)
{
n <- nrow(sgd)
nparm <- ncol(sgd)
# IBS Estimators
am <- ceiling( cns*(1 : 1e3)^(2/(1 - alp)))
am <- c(am[am < n], (n+1))
# Batch Sizes
bm <- diff(am)
batch_means <- t(sapply(1:(length(am)-1), function(i) colMeans( matrix(sgd[am[i] : (am[i+1]-1), ], ncol = nparm ))))
batch_means <- sqrt(bm)*scale(batch_means, center = colMeans(sgd), scale = FALSE)
return(batch_means)
}
n <- sam_siz
parm <- seq(1 / nparm, 1, length.out = nparm)  #Parameter space
sg <- matrix(nrow = n + burn_in, ncol = nparm)
sg_ct <- matrix(nrow = n, ncol = nparm) # sgd iterates after dropping burn-in samples
# Following matrix will be used in generating regressors X
sqrt_sig <- diag(nparm)
ibs_batches <- ebs_batches <- vector()
for( itr in 1 : Iter)
{
# Generating data of Maximum Sample Size
x <- matrix(rnorm((n + burn_in) * nparm), nrow = (n + burn_in), ncol = nparm)
x <- x %*% sqrt_sig
y <- x %*% parm + rnorm((n + burn_in), mean = 0, sd = 1)
# Learning Rate
eta <- numeric(n + burn_in)
sg[1, ] <- rep(0, nparm)  # always starting from the zero vector estimate
## Generating full SGD sequence -- this takes time
for(i in 2 : (n + burn_in))
{
eta[i] <- i^( - alp)
sg[i, ] <- sg[i - 1, ] - eta_cns * eta[i] * grad_lin(sg[i - 1, ], y[i], x[i, ])
}
sg_ct_full <- sg[(burn_in + 1) : (n + burn_in), ]      # Removing burn in
sg_ct <- sg_ct_full # main process inside this loop
asg <- colMeans(sg_ct) # Averaged SGD
################################
### IBS batch means calculations
################################
ibs_batches     <- c(ibs_batches, as.vector(ibs_jasa(sg_ct, alp, cns = cns1)))
###########
### EBS calculation
###########
ebs_batches <- c(ebs_batches, as.vector(ebs_batch(sg_ct, alp, cns = cns, bet_typ = 2)))
}
ibs_new <- quantile(ibs_batches, probs = runif(nsampl))
ebs_new <- quantile(ebs_batches, probs = runif(nsampl))
#pdf(file = paste("out/qq_dim_", nparm, "_sam_", n, ".pdf"))
par(mfrow = c(2, 1))
dev.off()
qqnorm(ibs_new, pch = 1, frame = FALSE, main = "IBS")
qqline(ibs_new, col = "steelblue", lwd = 2)
qqline(ebs_new, pch = 2, frame = FALSE, main = "EBS")
qqline(ebs_new, pch = 2, col = "red", lwd = 2)
qqnorm(ibs_new, pch = 1, frame = FALSE, main = "IBS")
qqline(ibs_new, col = "steelblue", lwd = 2)
qqline(ebs_new, pch = 2, frame = FALSE, main = "EBS")
qqplot(ebs_new, pch = 2, frame = FALSE, main = "EBS")
qqplot(ibs_new, ebs_new, pch = 1, frame = FALSE, main = "IBS")
qqnorm(ibs_new, pch = 1, frame = FALSE, main = "IBS")
qqline(ibs_new, col = "steelblue", lwd = 2)
qqline(ebs_new, pch = 2, frame = FALSE, main = "EBS")
qqline(ebs_new, pch = 2)
library(ggplot2)
library(ggplot2)
ggplot(data.frame(ibs_new, ebs_new),
aes(ibs_new, ebs_new, color = "First Model")) +
geom_point() +
geom_point(aes(ibs_new, ebs_new, color = "Second Model"))
ggplot(data.frame(ibs_new, ebs_new),
aes(ibs_new, ebs_new, color = "First Model")) +
geom_point() +
geom_point(aes(ibs_new, ebs_new, color = "Second Model")) +
geom_abline(intercept = 0, slope = 1, color = "darkred") +
scale_color_discrete("") +
xlab(expression(paste('Expected -log[10](', italic('p'),')'))) +
ylab(expression(paste('Observed -log[10](', italic('p'),')'))) +
theme_minimal()
ggplot(data.frame(ibs_new, ebs_new),
aes(ibs_new, ebs_new, color = "First Model")) +
geom_point() +
geom_point(aes(ibs_new, ebs_new, color = "Second Model")) +
geom_abline(intercept = 0, slope = 1, color = "darkred") +
scale_color_discrete("") +
xlab(expression(paste('Expected -log[10](', italic('p'),')'))) +
ylab(expression(paste('Observed -log[10](', italic('p'),')'))) +
theme_minimal()
ggplot(data.frame(ibs_new, ebs_new),
aes(ibs_new, ebs_new, color = "First Model")) +
geom_point() +
geom_point(aes(ibs_new, ebs_new, color = "Second Model")) +
geom_abline(intercept = 0, slope = 1, color = "darkred") +
scale_color_discrete("") +
xlab(expression(paste('Expected -log[10](', italic('p'),')'))) +
ylab(expression(paste('Observed -log[10](', italic('p'),')'))) +
theme_minimal()
ggplot(data.frame(ibs_new, ebs_new),
aes(ibs_new, ebs_new, color = "First Model")) +
geom_qq(ibs_new)
ggplot(data.frame(ibs_new, ebs_new),
aes(ibs_new, ebs_new, color = "First Model")) +
geom_qq()
dt <- data.frame(ibs_new, ebs_new)
ggplot(dt, aes(sample = ibs_new)) +
geom_qq() +
geom_qq_line()
?geom_qq
dt <- data.frame(ibs_new, ebs_new)
ggplot(dt, aes(sample = ibs_new)) +
geom_qq() +
geom_qq_line() + geom_qq(ebs_new)
dt <- data.frame(ibs_new, ebs_new)
ggplot(dt, aes(sample = ibs_new)) +
geom_qq() +
geom_qq_line()# + geom_qq(ebs_new)
ggplot(dt, aes(sample = ibs_new)) +
geom_qq() +
geom_qq_line() + geom_qq(ebs_new)
rlang::last_error()
ggplot(dt, aes(sample = ibs_new)) +
geom_qq() +
geom_qq_line() + geom_qq(aes(ebs_new))
ggplot(dt, aes(sample = ibs_new)) +
geom_qq() +
geom_qq_line() + geom_qq(aes(sample = ebs_new))
ggplot(dt, aes(sample = ibs_new, colour = "red")) +
geom_qq(col ) +
geom_qq_line() + geom_qq(aes(sample = ebs_new))
ggplot(dt, aes(sample = ibs_new)) +
geom_qq(col ) +
geom_qq_line() + geom_qq(aes(sample = ebs_new))
ggplot(dt, aes(sample = ibs_new)) +
geom_qq(col ) +
geom_qq_line() + geom_qq(aes(sample = ebs_new))
ggplot(dt, aes(sample = ibs_new)) +
geom_qq() +
geom_qq_line() + geom_qq(aes(sample = ebs_new))
ggplot(dt, aes(sample = ibs_new, colour = "red")) +
geom_qq() +
geom_qq_line() + geom_qq(aes(sample = ebs_new))
ggplot(dt, aes(sample = ibs_new)) +
geom_qq(aes( colour = "red")) +
geom_qq_line() + geom_qq(aes(sample = ebs_new))
qqnorm(ibs_new, pch = 1, frame = FALSE, main = "IBS")
qqline(ibs_new, col = "steelblue", lwd = 2)
qqnorm(ebs_new, pch = 1, frame = FALSE, main = "EBS")
qqline(ebs_new, col = "steelblue", lwd = 2)
dt <- data.frame(ibs_new, ebs_new)
ggplot(dt, aes(sample = ibs_new)) +
geom_qq(aes( colour = "red")) +
geom_qq_line() + geom_qq(aes(sample = ebs_new))
ggplot(dt, aes(sample = ibs_new)) +
geom_qq(aes( colour = "red")) +
geom_qq_line(aes( colour = "red")) + geom_qq(aes(sample = ebs_new))
ggplot(dt, aes(sample = ibs_new)) +
geom_qq(aes( colour = "red")) +
geom_qq_line(aes( colour = "red")) + geom_qq(aes(sample = ebs_new)) + geom_qq_line()
ggplot(dt, aes(sample = ibs_new)) +
geom_qq(aes( colour = "red")) +
geom_qq_line(aes( colour = "red")) + geom_qq(aes(sample = ebs_new)) + geom_qq_line(aes())
ggplot(dt, aes(sample = ibs_new)) +
geom_qq(aes( colour = "red")) +
geom_qq_line(aes( colour = "red")) + geom_qq(aes(sample = ebs_new)) + geom_qq_line(aes(colour = "cyanblue"))
ggplot(dt, aes(sample = ibs_new)) +
geom_qq(aes( colour = "red")) +
geom_qq_line(aes( colour = "red"))
+ geom_qq(aes(sample = ebs_new)) + geom_qq_line(aes(colour = "cyanblue"))
ggplot(dt, aes(sample = ibs_new)) +
geom_qq(aes( colour = "red")) +
geom_qq_line(aes( colour = "red")) + geom_qq(aes(sample = ebs_new)) + geom_qq_line(aes(colour = "cyanblue"))
ibs_new <- rnorm(1000)
ebs_new <- rnorm(1000)
nsampl <- 1000
p1 <- pnorm(seq(-3,3, length = nsampl))
ibs_new <- quantile(scale(ibs_batches), probs = p1)
ebs_new <- quantile(scale(ebs_batches), probs = p1)
theory <- qnorm(p1)
plot(theory, ibs_new, xlab = "Theoretical Quantiles",
ylab = "Sample Quantiles", ylim = range(theory), type = "n")
lines(theory, ibs_new, pch = 1, col = "steelblue")
lines(theory, ebs_new, pch = 1, col = "brown", lwd = 2)
lines(theory, theory, col = "black", lwd = 1, lty = 2)
legend("bottomright", legend = c("IBS", "EBS"),
col = c("steelblue", "brown"),
lty = 1, box.lty=0, box.lwd=1)
ibs_new <- rnorm(1000)
ebs_new <- rnorm(1000)
nsampl <- 1000
p1 <- pnorm(seq(-3,3, length = nsampl))
ibs_new <- quantile(scale(ibs_new), probs = p1)
ebs_new <- quantile(scale(ebs_new), probs = p1)
theory <- qnorm(p1)
plot(theory, ibs_new, xlab = "Theoretical Quantiles",
ylab = "Sample Quantiles", ylim = range(theory), type = "n")
lines(theory, ibs_new, pch = 1, col = "steelblue")
lines(theory, ebs_new, pch = 1, col = "brown", lwd = 2)
lines(theory, theory, col = "black", lwd = 1, lty = 2)
legend("bottomright", legend = c("IBS", "EBS"),
col = c("steelblue", "brown"),
lty = 1, box.lty=0, box.lwd=1)
ibs_new <- rnorm(1000)
ebs_new <- rnorm(1000)
nsampl <- 1000
p1 <- pnorm(seq(-3,3, length = nsampl))
ibs_new <- quantile((ibs_new), probs = p1)
ebs_new <- quantile((ebs_new), probs = p1)
theory <- qnorm(p1)
plot(theory, ibs_new, xlab = "Theoretical Quantiles",
ylab = "Sample Quantiles", ylim = range(theory), type = "n")
lines(theory, ibs_new, pch = 1, col = "steelblue")
lines(theory, ebs_new, pch = 1, col = "brown", lwd = 2)
lines(theory, theory, col = "black", lwd = 1, lty = 2)
legend("bottomright", legend = c("IBS", "EBS"),
col = c("steelblue", "brown"),
lty = 1, box.lty=0, box.lwd=1)
ibs_new <- rnorm(1000, sd = 2)
ebs_new <- rnorm(1000)
nsampl <- 1000
p1 <- pnorm(seq(-3,3, length = nsampl))
ibs_new <- quantile((ibs_new), probs = p1)
ebs_new <- quantile((ebs_new), probs = p1)
theory <- qnorm(p1)
plot(theory, ibs_new, xlab = "Theoretical Quantiles",
ylab = "Sample Quantiles", ylim = range(theory), type = "n")
lines(theory, ibs_new, pch = 1, col = "steelblue")
lines(theory, ebs_new, pch = 1, col = "brown", lwd = 2)
lines(theory, theory, col = "black", lwd = 1, lty = 2)
legend("bottomright", legend = c("IBS", "EBS"),
col = c("steelblue", "brown"),
lty = 1, box.lty=0, box.lwd=1)
ibs_new <- rnorm(1000)
ebs_new <- rnorm(1000, sd = 2)
nsampl <- 1000
p1 <- pnorm(seq(-3,3, length = nsampl))
ibs_new <- quantile((ibs_new), probs = p1)
ebs_new <- quantile((ebs_new), probs = p1)
theory <- qnorm(p1)
plot(theory, ibs_new, xlab = "Theoretical Quantiles",
ylab = "Sample Quantiles", ylim = range(theory), type = "n")
lines(theory, ibs_new, pch = 1, col = "steelblue")
lines(theory, ebs_new, pch = 1, col = "brown", lwd = 2)
lines(theory, theory, col = "black", lwd = 1, lty = 2)
legend("bottomright", legend = c("IBS", "EBS"),
col = c("steelblue", "brown"),
lty = 1, box.lty=0, box.lwd=1)
ibs_new <- rnorm(1000)
ebs_new <- rnorm(1000, sd = 0.2)
nsampl <- 1000
p1 <- pnorm(seq(-3,3, length = nsampl))
ibs_new <- quantile((ibs_new), probs = p1)
ebs_new <- quantile((ebs_new), probs = p1)
theory <- qnorm(p1)
plot(theory, ibs_new, xlab = "Theoretical Quantiles",
ylab = "Sample Quantiles", ylim = range(theory), type = "n")
lines(theory, ibs_new, pch = 1, col = "steelblue")
lines(theory, ebs_new, pch = 1, col = "brown", lwd = 2)
lines(theory, theory, col = "black", lwd = 1, lty = 2)
legend("bottomright", legend = c("IBS", "EBS"),
col = c("steelblue", "brown"),
lty = 1, box.lty=0, box.lwd=1)
ibs_new <- rnorm(1000)
ebs_new <- rnorm(1000, mean = -1)
nsampl <- 1000
p1 <- pnorm(seq(-3,3, length = nsampl))
ibs_new <- quantile((ibs_new), probs = p1)
ebs_new <- quantile((ebs_new), probs = p1)
theory <- qnorm(p1)
plot(theory, ibs_new, xlab = "Theoretical Quantiles",
ylab = "Sample Quantiles", ylim = range(theory), type = "n")
lines(theory, ibs_new, pch = 1, col = "steelblue")
lines(theory, ebs_new, pch = 1, col = "brown", lwd = 2)
lines(theory, theory, col = "black", lwd = 1, lty = 2)
legend("bottomright", legend = c("IBS", "EBS"),
col = c("steelblue", "brown"),
lty = 1, box.lty=0, box.lwd=1)
ibs_new <- rnorm(1000)
ebs_new <- rnorm(1000, mean = 1)
nsampl <- 1000
p1 <- pnorm(seq(-3,3, length = nsampl))
ibs_new <- quantile((ibs_new), probs = p1)
ebs_new <- quantile((ebs_new), probs = p1)
theory <- qnorm(p1)
plot(theory, ibs_new, xlab = "Theoretical Quantiles",
ylab = "Sample Quantiles", ylim = range(theory), type = "n")
lines(theory, ibs_new, pch = 1, col = "steelblue")
lines(theory, ebs_new, pch = 1, col = "brown", lwd = 2)
lines(theory, theory, col = "black", lwd = 1, lty = 2)
legend("bottomright", legend = c("IBS", "EBS"),
col = c("steelblue", "brown"),
lty = 1, box.lty=0, box.lwd=1)
gc()
gc()
gc()
setwd("~/conferences/icassp_2023/real_data_analysis/data_sets")
rm(list=ls())
library(imager)
library(tiff)
library(raster)
mymat <- as(raster("Fig0115(a)(thum-print-loop).tif"), "matrix")
M1 <- 1; M2 <- 200; N1 <- 50; N2 <- 320
M <- M2 - M1 + 1
N <- N2 - N1 + 1
plot(as.cimg(mymat[M1 : M2, N1 : N2]))
y <- mymat[M1 : M2, N1 : N2]
set.seed(100)
library(smoothmest)
setwd("~/GitHub/Batch_Means_Online/linear_lad")
set.seed(100)
library(smoothmest)
source("qq_lad.R")
lad_qq(nparm = 5, cns = c(0.1),
eta_cns = 0.5, sam_siz = 5e4, alp = .51,
burn_in = 5000, cns1 = 0.1, Iter = 50, nsampl = 100)
lad_qq(nparm = 5, cns = c(0.1),
eta_cns = 0.5, sam_siz = 1e6, alp = .51,
burn_in = 5000, cns1 = 0.1, Iter = 50, nsampl = 100)
lad_qq(nparm = 20, cns = c(0.1),
eta_cns = 1, sam_siz = 5e4, alp = .51,
burn_in = 5000, cns1 = 0.1, Iter = 50, nsampl = 100)
lad_qq(nparm = 20, cns = c(0.1),
eta_cns = 1, sam_siz = 1e6, alp = .51,
burn_in = 5000, cns1 = 0.1, Iter = 50, nsampl = 100)
